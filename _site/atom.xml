<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jack Kinsella</title>
 <link href="http://www.jackinsella.ie/atom.xml" rel="self"/>
 <link href="http://www.jackkinsella.ie/"/>
 <updated>2014-06-08T23:22:16+02:00</updated>
 <id>http://www.jackkinsella.ie/</id>
 <author>
   <name>Jack Kinsella</name>
 </author>
 
 <entry>
   <title>Debugging Rails with Pry Console</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugginging-rails-with-pry-console.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugginging-rails-with-pry-console</id>
   <content type="html">&lt;p&gt;Part 3 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pry-console&quot;&gt;Pry Console&lt;/h2&gt;

&lt;p&gt;Step one in programming with Rails: replace the typical Rails console (based on IRB) with the superior console provided by the pry gem.&lt;/p&gt;

&lt;p&gt;Amongst other things Pry is fantastic for browsing the contents of your codebase. Youre probably thinking you can also browse your available functions and classes through other means such as &lt;strong&gt;ack&lt;/strong&gt; and &lt;strong&gt;Ctags&lt;/strong&gt;, but both suffer some limitations and therefore offer only an imperfect view of your codebase. &lt;strong&gt;Ack&lt;/strong&gt; typically operates at a folder level and therefore you exclude from your search code within your gems. &lt;strong&gt;Ctags&lt;/strong&gt;, configured correctly, can easily include the code from your gems, but still shows an incomplete picture owing to its inability to tag functions that were created dynamically by your Ruby code, such as with define_method. Your Pry console, however, offers a more complete reflection and registers all classes and methods already required or dynamically defined.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;ls command&lt;/strong&gt; is essentially a unified wrapper to a number of Ruby’s introspection mechanisms, including (but not limited to) the following: #methods, #instance_variables, #constants, #local_variables, #instance_methods, #class_variables, and all the various permutations thereof. Run in the context of the current object with &lt;code&gt;ls&lt;/code&gt; alone, or in the context of another Ruby object by providing it as its first argument &lt;code&gt;ls product&lt;/code&gt;. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Filter results of ls to only see methods containing the string ‘map’:&lt;/strong&gt; &lt;code&gt;ls -G map&lt;/code&gt; or methods within the module Repo that start with the letter ‘b’ : &lt;code&gt;ls -M Repo --grep ^b&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cd command&lt;/strong&gt;, change “self”, i.e. the object within which you sit and observe your application, to another Ruby object. Example: &lt;code&gt;cd product&lt;/code&gt;, or, since classes are also objects within Ruby, you can also run &lt;code&gt;cd Spree::Product&lt;/code&gt;. The cd command allows you to move into an object, thereby introspecting local variables easily and calling private methods without the awkwardness of accessing them from outside an object with code such as: &lt;code&gt;obj.send :method_name&lt;/code&gt; . To leave an object and return back to where you came from type &lt;code&gt;cd -&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List &lt;strong&gt;global variables:&lt;/strong&gt; &lt;code&gt;ls -g&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List &lt;strong&gt;constants:&lt;/strong&gt; &lt;code&gt;ls -c&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;See all &lt;strong&gt;methods within a namespace whose &lt;em&gt;names&lt;/em&gt; contains&lt;/strong&gt; the word currency: &lt;code&gt;find-method currency Spree&lt;/code&gt;. This is slower albeit more thorough than typical acking, for the reasons mentioned above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Find all methods whose contents or &lt;em&gt;comments&lt;/em&gt; contain the word currency:&lt;/strong&gt; Similar to the previous point, except with an added flag you can use this function to peer &lt;em&gt;inside&lt;/em&gt; method definitions: &lt;code&gt;find-method -c bug Spree&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;View latest exception:&lt;/strong&gt; The latest exception is contained within a special variable &lt;code&gt;_ex_&lt;/code&gt;. See its backtrace with &lt;code&gt;wtf&lt;/code&gt;? and the code that raised the exception with &lt;code&gt;cat --ex&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;View source code of&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;any method in your application or its gems:&lt;/strong&gt; &lt;code&gt;show-source Spree::Product#bought_since&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;of a class, separating each monkey patch out:&lt;/strong&gt; &lt;code&gt;show-source -a Spree::Product&lt;/code&gt;. Great for when the source code doesnt reveal why a class/method is acting the way it is, and you suspect a monkey patch quietly overriding some functionality.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;of a Proc/lambda:&lt;/strong&gt; &lt;code&gt;show-source my_proc&lt;/code&gt; Typically in Ruby you cannot inspect the contents of a Proc, so this is damn nifty debugging feature.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Pry Debugger</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-pry-debugger.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-pry-debugger</id>
   <content type="html">&lt;p&gt;Part 4 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rails-debugging-with-pry&quot;&gt;Rails Debugging with Pry&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you don’t yet know what a debugging session is, think of it as opening the Rails console at a chosen point in the execution path.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I assume below that you have installed the &lt;a href=&quot;https://github.com/nixme/pry-debugger&quot;&gt;Pry-debugger&lt;/a&gt; and the &lt;a href=&quot;https://github.com/pry/pry-stack_explorer&quot;&gt;pry-stack_explorer&lt;/a&gt; gems.&lt;/p&gt;

&lt;p&gt;At any point in your source code (including within the downloaded code of the gems included into your Gemfile and conveniently opened in the text editor with bundle open gem_name) you can insert the line binding.pry. Whenever the Ruby interpreter executes that line, it stops what it’s doing and opens a Pry REPL session at that point.  Had you been interacting with the website via the browser you’ll need to switch programs to the terminal console tab in which your Rails server was running for you to see the Pry session.&lt;/p&gt;

&lt;p&gt;For the sake of clarity in explaining what is to follow I include a code-snippet here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def place_everyone_on_sale
  Seller.all.each do |seller|
    place_on_sale(seller)
  end
end

def place_on_sale(seller)
  binding.pry          # Execution will stop here.
  new_products = generate_products(seller)
  new_product.advertise
  new_products
end

def generate_products(seller)
   seller.documents.each do |document|
     document.place_online if document.releasable
   end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within your Pry console you have all the features mentioned already to inspect state or introspect your program with the likes of ls product. Debugging adds stack navigation across stack frames. Lets lie a little and define a stack frame as a “REPL console opened up at any of the possible points along the stack trace Why might we want to &lt;strong&gt;navigate&lt;/strong&gt; stack frames? To further pinpoint our error by looking for more specific causes. We do this sometimes by looking for the moment when a certain variable changes value (e.g. a cookie gets set). Other times we navigate to observe the flow of execution, comparing what we expect with what we see. For example you might notice that the wrong branch of an if-else construct was executed.&lt;/p&gt;

&lt;p&gt;Having executed &lt;code&gt;place_everything_on_sale&lt;/code&gt; in the code snippet above, you’ll find yourself launched into a Pry session within the &lt;code&gt;place_on_sale&lt;/code&gt; method and presented with a question of what you’d like to do next.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;step command&lt;/strong&gt; continues execution by moving you &lt;em&gt;into&lt;/em&gt; the method on the next line, changing your stack frame to be inside that method. Phrased another way it goes deeper. Following our code example, running &lt;code&gt;step&lt;/code&gt; will bring you within the &lt;code&gt;generate_products&lt;/code&gt; method, at which point you’ll be asked what you’d like to do next.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You’ve “stepped” into the &lt;code&gt;generate_products&lt;/code&gt; method with &lt;code&gt;step&lt;/code&gt; above, but now youve decided that you want to skip to the end of the &lt;code&gt;generated_products&lt;/code&gt; method without the debugger asking for your choice of navigation command after every line. Type &lt;code&gt;finish&lt;/code&gt; to execute until the current stack frame has run every line, closed and return a value, thereby surfacing by one level, that is moving back into the stack frame from which you had previously stepped out of. Following the example, that brings you back into the &lt;code&gt;place_on_sale&lt;/code&gt; method to the point after the interpreter has evaluated &lt;code&gt;generated_products&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;next command&lt;/strong&gt; runs the current line and moves to the next line or method in the &lt;em&gt;current context&lt;/em&gt;, i.e. progressing without changing stack frame. Phrased another way, continue one line down the current method without going deeper. Looking at the code example, (and pretending that we’d just restarted our program , run &lt;code&gt;place_everything_on_sale&lt;/code&gt;, and freshly opened up a Pry session), typing &lt;code&gt;next&lt;/code&gt; will completely execute the generate_products without dropping you into its internals then it will assign the return value to the new_products variable. Nexts are bigger that steps, or in Rails terms, a next has_many steps. All the code within the generate_products method (which would otherwise be many steps), has been concluded with a single use of the &lt;code&gt;next&lt;/code&gt; command. Your next navigation decision will be whether to step, next at &lt;code&gt;new_product.advertise&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Abandon the Pry session and continue the program execution as normal with &lt;strong&gt;the &lt;code&gt;continue&lt;/code&gt; command&lt;/strong&gt;. If the interpreter encounters another binding.pry statement, (which will happen when you call the &lt;code&gt;place_everyone_on_sale&lt;/code&gt; method above), it will execute the place_on_sale method once for every seller, therefore opening a Pry session on every iteration. This can be incredibly annoying, since your program will stop and you’ll have to navigate the debugger every single time, so you’ll probably want to type &lt;code&gt;exit-program&lt;/code&gt; to cancel the effect of any following binding.pry statements, without, so to speak exiting your Rails program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;View the source code of the method you are currently within:&lt;/strong&gt;  &lt;code&gt;whereami&lt;/code&gt; Great for confirming that you are in the right class or for seeing where you have ended up after travelling through a few frames in your debugging session.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Print and navigate call stack&lt;/strong&gt; When an exception is raised in Ruby it prints a stack trace of all the methods called prior to that exception. Sometimes you want to view the stack trace thus far despite there being no exception raised. Thanks to one particular pry extension installed by adding the &lt;code&gt;pry-stack_explorer&lt;/code&gt;  gem, you can do this with &lt;code&gt;show-stack -v&lt;/code&gt;. This command outputs the stack trace, indicating the current frame with an arrow. You can navigate to another frame with up or “up {n}”, e.g. up 3 to go upwards three frames, that is move your REPL to the context of the method that called the method (and so on…) that eventually called the method in which you are currently placed. Type &lt;code&gt;show-stack&lt;/code&gt; to see where you have moved to in the stack, and down to move frames in the opposite direction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exit context with a value:&lt;/strong&gt; Sometimes you want to manipulate program flow by returning a certain value from a Pry session. For a strained example, imagine you had a line of code that read &lt;code&gt;first_name = binding.pry&lt;/code&gt;. The first_name variable is assigned the output from the Pry session, and you can set this value to jack with &lt;code&gt;exit &quot;jack&quot;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes you want to specify exactly when the binding.pry will crack open a pry-session. I do this with Ruby code conditionals:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; binding.pry if session[:added_to_cart] == true
 binding.pry if @first_name == &quot;Jack&quot;
 binding.pry if iteration &amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Operating System Tools</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-operating-system-tools.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-operating-system-tools</id>
   <content type="html">&lt;p&gt;Part 5 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;operating-system-level-mirrors&quot;&gt;Operating System Level Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain name/DNS info:&lt;/strong&gt; View and debug DNS/IP issues using nslookup. To see the mail records (MX) for a domain type &lt;code&gt;$ nslookup -type=mx oxbridgenotes.co.uk&lt;/code&gt; (note that you need to drop any possible “www” in front of the domain here). Look up the IP addresses associated with a domain using &lt;code&gt;$ nslookup www.oxbridgenotes.co.uk&lt;/code&gt;. Find out how long a DNS record will be cached for with &lt;code&gt;$ nslookup -debug www.oxbridgenotes.co.uk&lt;/code&gt;. See all possible nameservers with &lt;code&gt;$ nslookup -type=ns www.oxbridgenotes.co.uk&lt;/code&gt;. Knowing the possible nameservers from which to query IP address and other information enables you to query the result of one particular nameserver using &lt;code&gt;$ nslookup www.oxbridgenotes.co.uk ns1.redhat.com&lt;/code&gt; (where ns1.redhat.com was returned as a possible nameserver using type=ns). Why might you want to do this? To quickly verify that changes you made to your DNS records were carried out successfully without waiting a lifetime for the records to propagate across the internet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;List of open files and sockets:&lt;/strong&gt; Figure out what files or sockets your Rails server is at that second interacting with by typing &lt;code&gt;$ lsof -p &amp;lt;PID&amp;gt;&lt;/code&gt;, where PID is the process id of the Rails application process. Useful in combination with &lt;strong&gt;dtruss&lt;/strong&gt; when you’d like to map out the file-descriptor arguments to &lt;strong&gt;syscalls&lt;/strong&gt; to the names of the files/sockets in question.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;curl:&lt;/strong&gt; Sometimes you cannot easily test a particular URL from within the browser. In these cases curl comes to the rescue. Request the &lt;code&gt;localhost:3000/product_list&lt;/code&gt; URL from the command line with &lt;code&gt;$ curl http://localhost:3000/product_list&lt;/code&gt;. By default curl performs a GET request, but can also be set to use other HTTP verbs such as POST/PUT with the “X” flag. For example &lt;code&gt;$ curl -X POST http://localhost:3000/to_txt -F file=@/Users/jkinsella/Code/oxnotes-docservice/fixtures/length.pdf&lt;/code&gt; posts a form (“F flag”) that includes a local file (preceded by “@”). Curl is particularly useful for making requests with custom headers, specified using the “H” flag. For example &lt;code&gt;$ curl localhost:3000/product_list -H &quot;Content-Type:image/gif&quot;&lt;/code&gt;. Another common use-case is to exclusively return the HTML headers from a request without waiting for the whole body of the request. Use the I option, e.g. curl -I www.google.com&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Process Listing:&lt;/strong&gt; Whenever your Rails application starts (server, console, Rake, whatever) it creates an operating system level process. You can search for this process using &lt;code&gt;$ ps aux | grep rails&lt;/code&gt;. The output provides information about the process ID, the state/health of that process, and the memory/CPU resources it consumes. For detailed information on interpreting this output refer to man ps. Watch out for situations when you see more Rails processes output than you expect, as this might indicate processes that are hidden/daemons/still running despite not having a terminal tab open and attached the them. Process listing is your best friend in debugging situations where Rails interacts with another program on your operating system. For example many Rails websites use the separate database program &lt;strong&gt;postgres&lt;/strong&gt;, and when things aren’t working with your database, a great first step is to check whether the postgres process is running correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;C Debugger (gdb):&lt;/strong&gt; (This section assumes you are using the standard Ruby install that is compiled in C, as opposed to MacRuby, JRuby etc.) The C debugger is used to debug problems a Ruby debugger will have difficulty reaching, notably infinite loop bugs. (You’ll notice an infinite loop bug because the program seemingly freezes without exiting or spitting out a stack trace.) or in situations where you have a sporadic bug that may disappear on restart and you  would rather find out whats wrong &lt;em&gt;now&lt;/em&gt;. In getting the gdb to work, the order in which you enter commands is important. First, start your Rails process (server / console / whatever) as normal. Second, execute the request/console command that causes the infinite looping problem. Wait until the Ruby process is stalled then open up a new terminal tab and activate the gdb. Typically you start it with &lt;code&gt;$ sudo gdb $(which ruby) 67563&lt;/code&gt;, where the first argument dynamically figures out the Ruby compiler you are using (a necessary argument to gdb), and the second argument is the process id (pid) of the Ruby process running your Rails application. (Figure out what this pid is by running &lt;code&gt;ps aux | grep ruby&lt;/code&gt;). Now that gdb is attached to your Rails process you can force a Ruby backtrace with &lt;code&gt;call (void)rb_backtrace()&lt;/code&gt;. This backtrace will not appear in your Rails server process terminal tab like it would when you are interacting your Rails software normally through URL requests; instead the backtrace will be appended to the &lt;code&gt;log/development.log&lt;/code&gt; file, which you monitor with &lt;code&gt;$ tail -f log/development.log&lt;/code&gt;. The backtrace forced through at the C level provides an otherwise unavailable insight into why and where the program stalled. Gdb also provides the possibility of debugging at C level, but that’s beyond the scope of this article.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Installation woes: On Mavericks you’ll need to install &lt;strong&gt;gdb&lt;/strong&gt; with Homebrew then &lt;a href=&quot;http://wiki.lazarus.freepascal.org/GDB_on_OS_X_Mavericks_and_Xcode_5&quot;&gt;codesign it by following this guide&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;tcpdump:&lt;/strong&gt; The lowest common denominator across unix-like systems for dumping traffic on a network. Say you want to monitor all packet traffic originating from the domain oxbridgenotes.com and interacting with some daemon program or opaque command line script. In this situation you can’t simply open up Google Chrome DevTools Network Tab and monitor the request in this way. Instead you must rely on command line tools, and here the command in question is: &lt;code&gt;$ sudo tcpdump -s 0 -A host &quot;www.oxbridgenotes.co.uk&quot;&lt;/code&gt;. The &lt;code&gt;s 0&lt;/code&gt; option specifies to remove the limits on packet size normally present. The A options says print out ASCII renditions of the packets. Tcpdumps output shows the source IP address and the destination IP address of each packet alongside what was contained within, enabling you to ensure that correct information was sent from the right places at this level. On other occasions, such as when debugging web-sockets, you might want to monitor traffic on a particular port: &lt;strong&gt;&lt;code&gt;$ sudo tcpdump port 8000&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Environmental variables:&lt;/strong&gt; A number of variables set outside the Rails software, i.e. at the OS level, can influence either our code or the third party libraries we use. You’ll know that these variables are in use whenever the codebase contains a reference to the ENV global variable, for example ENV[“LOG_LEVEL”] is Ruby’s way of accessing the environmental variable LOG_LEVEL. View all the environmental variables on production using &lt;code&gt;$ h config&lt;/code&gt;. In development we dump the Heroku environmental variables into the mirrored &lt;code&gt;.env&lt;/code&gt; file with &lt;code&gt;$ heroku config &amp;gt; .env&lt;/code&gt;, and then these variables become available to our software thanks to the Foreman gem. System level environmental variables may also be set, most typically by user modifications to the &lt;code&gt;~/.bashrc&lt;/code&gt; file. You can view the contents of these environmental variables with &lt;strong&gt;echo&lt;/strong&gt;. For example view the contents of the LOG_LEVEL environmental variable with &lt;code&gt;$ echo $LOG_LEVEL&lt;/code&gt;(notice the dollar sign necessarily appended to the variable name). To list all variables and their values type: &lt;code&gt;$ printenv&lt;/code&gt;. Access the same listing within your Rails console by typing ENV.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Temporary Files:&lt;/strong&gt; Our application uses the tmp/ folder to store temporary files, such the Word documents we temporarily download before zipping into larger packages and uploading to s3 for storage. Inspect the contents of this folder to debug issues such as whether the algorithm is downloading files correctly. It’s useful to employ the &lt;strong&gt;watch&lt;/strong&gt; command to periodically run another sub command (here &lt;strong&gt;ls&lt;/strong&gt;) on the tmp folder, for example &lt;code&gt;$ watch -n 10 ls tmp/seller-invoices&lt;/code&gt; checks the contents of the &lt;code&gt;tmp/seller-invoices&lt;/code&gt; folder every ten seconds, updating the screen with the contents, enabling you to see changes as they happen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;which:&lt;/strong&gt; A godsend for figuring out whether there are multiple installations of command line programs, be that our own or those installed by gems or &lt;code&gt;homebrew&lt;/code&gt;, and for ascertaining whether invoking that program via command line uses the version we intended. &lt;code&gt;$ which -a postgres&lt;/code&gt; reveals all the locations of postgresql binaries currently on the $PATH, with the binary called whenever you type the unqualified command (e.g. $ postgres) appearing first in this list. Change the order of the commands output by which by modifying the $PATH variable in your ~/.bashrc file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exuberant Ctags:&lt;/strong&gt; Used in conjunction with Vim through the &lt;a href=&quot;https://github.com/xolox/vim-easytags&quot;&gt;EasyTags&lt;/a&gt; plugin, Exuberant Ctags lets you quickly jump to the definition of any function within your codebase. Force a project level tag refresh with :UpdateTags -R ~/Code/oxbridgenotes/.  Enter Vim and jump to the function &lt;code&gt;generate_products&lt;/code&gt; by &lt;code&gt;typing :ta generate_products&lt;/code&gt;. The &lt;code&gt;:ta&lt;/code&gt; command also accepts regular expressions, meaning you can find all functions starting with “generate” using &lt;code&gt;:ta /generate/*&lt;/code&gt;. View the entire list of matches with &lt;code&gt;:ts(elect)&lt;/code&gt; (bracketed letters are optional in invoking the Vim function) and move forwards one tag with &lt;code&gt;:tn(ext)&lt;/code&gt; and backward with &lt;code&gt;:tp(rev)&lt;/code&gt;. By default Ctags show all the tags within your Rails project directory, leaving out that of the gems. It’s more helpful to extend tagging to include the codebase of all your gems by using this command &lt;code&gt;$ ctags -e --exclude=.git --exclude=&#39;*.log&#39; -R *bundle show --paths&lt;/code&gt;. Now you can type in the name of any function within any of the gems listed in your Gemfile` and jump to the source code- an absolutely enormous time-saver.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;history grepping:&lt;/strong&gt; Search previous command line commands. For example I can search all curl commands with &lt;code&gt;$ history | grep curl&lt;/code&gt;, and use this to refresh my memory about a particular set of flags I used to solve a problem in the past. I set my history to hold 20000 lines with &lt;code&gt;export HISTSIZE=20000&lt;/code&gt; added to my ~/.bashrc, meaning that I effectively keep my history of commands as a reference for years.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ack for real world usage examples:&lt;/strong&gt; Sometimes legacy functions are nicely documentedbe that in your project documentation, the unit tests validating that function, or the in-code comments above the function. More often though, these functions arent documented at all and it may not be apparent how they should be used. The very fact that a legacy function has already been used elsewhere in your project leads to implicit usage documentation. For example you find the &lt;strong&gt;generate_product(subject, price)&lt;/strong&gt; function and what data type price is supposed to be  a string, Integer, Float, or something else? Type &lt;strong&gt;$ ack generate_product&lt;/strong&gt; and amongst the results you may find clues of prior usage, such as &lt;strong&gt;generate_product(subject, 12.33)&lt;/strong&gt;, indicating that you should use a float. A variation of this technique is to refer to the values historically saved within a database column by printing out all the unique values ever saved and then inferring what format kind of format the column expects. For example &lt;strong&gt;Product.select(pricing_category).uniq&lt;/strong&gt; returns all the pricing_categories saved within the database, informing you that it’s a one letter upper-case string code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dtruss (OS X) / strace (linux):&lt;/strong&gt; Monitor a) which operating system level calls (syscalls) your program makes, with what arguments, and how long each call takes to execute; and b) the OS signals a process receives. &lt;strong&gt;Dtruss&lt;/strong&gt; spits out a fire a great deal of data, but is nevertheless useful in situations where you can’t afford to stop the running program (e.g. in production) or when you have a hunch that the problematic program is bug-free but youre just using it wrong (e.g. your Unicorn server; init processes; anything involving configuration files that should appear in a specific location). Dtruss works programs ultimately rely on the operating system to do work such as opening files, forking new processes or printing output to screen, and these operations provide traceable clues as to the functioningor malfunctioningof your program. When using OS X you only have &lt;strong&gt;dtruss&lt;/strong&gt; available to you. Begin with &lt;code&gt;$ sudo dtruss -p PID_OF_YOUR_RUBY_PROCESS -f&lt;/code&gt;. The &lt;code&gt;f&lt;/code&gt; option specifies that youd also like to follow child processes, usually a sensible decision in understanding the scope of your program. The &lt;code&gt;a&lt;/code&gt; option asks &lt;strong&gt;dtruss&lt;/strong&gt; to print all information, including elapsed time and the process in question, a welcome counterpart to the &lt;code&gt;f&lt;/code&gt; option. As your Ruby process runs you’ll see a stream of operating system calls. Youre probably confused about what each of these functions meansI quote author of the Passionate Programmer, Chad Fowler on &lt;a href=&quot;http://chadfowler.com/blog/2014/01/26/the-magic-of-strace/&quot;&gt;his experience with learning strace&lt;/a&gt; &lt;em&gt;Neither did I at some point. I learned most of this stuff by tracing broken programs and reading man pages&lt;/em&gt;. For a full tutorial refer to Chads excellent piece.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;man search:&lt;/strong&gt; You probably know that you can type &lt;code&gt;$ man ANY_COMMAND_LINE_OR_SYSTEM_COMMAND&lt;/code&gt; to display its documentation in the terminal. A complementary time-saver that I only learned about much later was that you quickly search for keywords within man by typing forward slash followed by your keyword, e.g. /directory. Move forwards and backwards through the highlighted matching results with N or n.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;top:&lt;/strong&gt; Displays constantly updated, sorted information about resource usage of each process. For example &lt;code&gt;$ top -o cpu&lt;/code&gt;, shows the currently running processes in order of their CPU usage. (the o option stands for order). Top is useful to identify whether a stalled processes is statically stalled (e.g. waiting for a resource to be released/sleeping) since this would have close to 0% CPU usage, or is dynamically stall (e.g. infinite loop) since this often has heavy CPU usage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Online or Third Party Tools</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-online-or-third-party-tools.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-online-or-third-party-tools</id>
   <content type="html">&lt;p&gt;Part 7 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;online-and-third-party-mirrors&quot;&gt;Online and Third Party Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Google Webmaster Tools:&lt;/strong&gt; Google Webmaster Tools helps you evaluate your websites health in Google search engine results by providing reports about how many URLs were indexed by Google, what search engine queries your website ranks for, and how many URLs were contained in your sitemap. Webmaster tools also lists web-crawler errors, thereby indicating pages that 404 or have incorrect permissions. Webmaster Tools helps you avoid issues catastrophic to your SEO operation, therefore you don’t want to miss a single issue they raise. Keep in the loop by configuring their alerts setting to email you “All issues”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Google Search Results&lt;/strong&gt; We all Google our bugs and errors, but how does one increase the number of relevant results? Start by stripping platform specific information from your search string. For example take an error raising stack trace that contains the following:
&lt;code&gt;
/Users/jkinsella/.rvm/gems/ruby-1.9.3-p392/gems/activesupport-4.1.1/lib/active_support/dependencies.rb:247:in `require&#39;
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you Google that full string you will get no results that help explain your exception Google will search Stack Overflow, mailing list archives and other websites for an error containing the user string “jkinsella”, the ruby version “ruby-1-9-3.p392” and active support version “4.2.1”an exceedingly unlikely combination. A better Google query would be “active_support dependencies.rb:247:in `require’”, since that will return results for backtraces by people with any username, any Ruby version, and (nearly) any version of ActiveSupport, a much broader search that’s more likely to deliver results.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Email delivery reports:&lt;/strong&gt; Sometimes your Rails application sends off emails in production, yet, without raising any exception, your email silently fails to reach the intended recipient. You might only become aware of this weeks later when you notice low customer activation rates. Whenever you suspect email delivery issues, log in to our email delivery provider Sendgrid through the Heroku dashboard and check the  “Email Reports” tab for bounces (especially soft bounces), blocks, and spam reports. Better again, enable all of Sendgrid’s delivery report alerts so as to stay automatically informed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;New Relic:&lt;/strong&gt; Information about Ruby exceptions raised, application uptime, and application speed, whether that be the speed of web-requests, database calls,, external web service calls (e.g. to API providers like Amazon s3 or Searchify), or browser rendering times. New Relic rocks for debugging performance issues. It differs dramatically in production and development mode so it’s best to think of them as separate tools: the production tool focused on post-facto reporting and the development tool on in-depth debugging. Typically you might use New Relic production (accessed via the Heroku dashboard) to identify problem &lt;em&gt;areas&lt;/em&gt;, then having picked a problem to debug, you’d load up the development tool to debug &lt;em&gt;a known problem&lt;/em&gt;. The reason for this division is motivated by the realisation that you can, at great cost in time/money, optimise the performance of almost any component within a piece of software, but only a select few of these changes will make any noticeable difference to the user experience. To use the development New Relic tool, load up the application locally using our special development “caching_on” environment (Why not the normal development environment? Because development usually reloads Ruby classes on every request, making it unrealistically slow and skewing New Relic results. Read more about &lt;a href=&quot;http://guides.rubyonrails.org/configuring.html&quot;&gt;configuring environments here&lt;/a&gt;.) Visit /newrelic, perform a slow action in another tab and refresh. By default New Relic displays a breakdown of the SQL statements and the Ruby methods that generated these statements. If you’d like in depth information about how long each Ruby method took to run, then you need to click “Start Profiling” within “/newrelic”, and run the slow command again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Memcached</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-memcached.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-memcached</id>
   <content type="html">&lt;p&gt;Part 9 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;memcached-mirrors&quot;&gt;Memcached Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Memcached general stats:&lt;/strong&gt; In production you can use the Heroku dashboard to access detailed stats about Memcached usage. You’ll know you’re doing it right if you have a high &lt;strong&gt;hit rate&lt;/strong&gt;, a low &lt;strong&gt;eviction rate&lt;/strong&gt;, and a healthy excess of memory used compared to the allocated Memcached size (Once you run out of space Memcached &lt;a href=&quot;http://stackoverflow.com/questions/11222309/how-data-is-replaced-in-memcache-when-it-is-full-and-memcache-performance&quot;&gt;deletes the oldest cached item&lt;/a&gt;, reducing the effectiveness of your caching). Memcached wont alert you whenever your cache is in a poor state, so you’ll need to log in and check regularly. Indeed I found my cache in a rotten form when I was researching this article. You can also view global Memcached stats with the Rails console using &lt;code&gt;Rails.cache.stats&lt;/code&gt;. Read this for a &lt;a href=&quot;http://www.pal-blog.de/entwicklung/perl/memcached-statistics-stats-command.html&quot;&gt;legend for reading memcached stats output&lt;/a&gt;, and then understand some confusing nuances with &lt;a href=&quot;http://stackoverflow.com/questions/6868256/memcached-eviction-prior-to-key-expiry/10456364#10456364&quot;&gt;this Stack Overflow discussion&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Memcached Cache contents:&lt;/strong&gt; In your codebase or in the console, set the value for a cache key with &lt;code&gt;Rails.cache.write(key) { code_that_returns_value }&lt;/code&gt; or &lt;code&gt;Rails.cache.fetch(key) {code_that_returns_value }&lt;/code&gt;. Read the value associated with a particular key using  Rails.cache.read(key). For cached content set at a controller level, for example set with with &lt;code&gt;caches_action&lt;/code&gt;, the cache key isn’t easy to guess from what you read within the code. Figure out the key by &lt;em&gt;temporarily&lt;/em&gt; setting the log level on production to debug with &lt;code&gt;heroku config:add LOG_LEVEL=&quot;debug&quot;&lt;/code&gt; then searching for entries starting with “Cache” that get triggered following a request to the particular page you are debugging. One example of such an entry is “Cache read: views/www.oxbridgenotes.co.uk/?cache_tag=1398678715/1379180679/407/6804/1398699264&amp;amp;format=html.html”. To inspect the contents of this cached entry within the console you’ll want to type Rails.cache.read(“views/www.oxbridgenotes.co.uk/?cache_tag=1398678715/1379180679/407/6804/1398699264&amp;amp;format=html.html”). I warned you that you’d be unlikely to guess the key.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Logs</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-logs.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-logs</id>
   <content type="html">&lt;p&gt;Part 8 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;logs-aka-historic-mirrors&quot;&gt;Logs, aka Historic Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interpreting the Rails server built-in logs:&lt;/strong&gt; Seasoned Rails pros will have interpreting logs down second nature, but I’ll outline the important realisations I had as a beginner for the sake of the version of me out there who is new to Rails development. Whenever you visit a page/fill a form/do an Ajax request in Rails, the server logs out a boatload of useful data. When should you refer to these logs? When you notice something you don’t expect to happen or see an error that you don’t know how to even start debugging. In these cases begin by systematically comparing what you see output in the logs with what you expect to see.  Let’s look at the workflow for interpreting the Rails log:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Manage your log tab with linux&lt;/strong&gt; Usually there is way too much information on your log screen. Start your debugging sessions by clearing the output in your terminal tab with Command+K. Alternatively, if the bug you want to identify has already occurred and for this reason you don’t want to clear the screen, then use the terminal’s Command+F feature to search all its contents (sometimes 1000s of screens worth of data) for something that identifies your bug. Finally I like to pipe log output into a &lt;em&gt;grep&lt;/em&gt; command to filter the information I want. For example when debugging Rendered information I might access my logs with &lt;code&gt;tail -f log/development.log | grep Rendered&lt;/code&gt;, thereby only displaying lines containing the string “Rendered”. Note that this configuration of tail and grep is a real-time filter, and will update the screen with any new Rendered lines added to the logs as you interact with your Rails application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Was the right URL hit?&lt;/strong&gt; Your logs separate each request to your Rails application by a line of white space, so your first step is to browse to where the log entry for the request in question begins by looking for lines of white space. Immediately underneath you’ll see the beginning of a request to a specific URL. For example &lt;code&gt;Started GET &quot;/admin/customers/43434/&quot;&lt;/code&gt; means that a GET request was sent to the admin/customers/43434 URL. Does the URL requested match your expectations? You might see the wrong URL here when your Javascript/form/link_to url_helper was incorrect.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Did the right controller and action process the request?&lt;/strong&gt; So you’re hitting the right URL. Next question is whether that URL was routed correctly to the controller and action you expect. The line &lt;code&gt;Processing by Spree::Admin::OrdersController#edit as HTML&lt;/code&gt; explains that the &lt;code&gt;edit&lt;/code&gt; method of the &lt;code&gt;OrdersController&lt;/code&gt; in the module Spree::Admin was called whenever the URL was requested. You’ll typically see a mismatch with your expectations when there is a bug in your routes.rb mapping URLs to controllers.The as HTML component means HTML was requested, as opposed to another data-type like JSON or JSthis information is useful for debugging controller actions that use respond_to to deal with multiple-formats such as HTML, JS or JSON requests from an API.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Did the router name the parameters correctly?&lt;/strong&gt; Within your controller action, say #edit above, you expect certain information available in the &lt;code&gt;params&lt;/code&gt; object. For example, you might want to have &lt;code&gt;params[:customer_id]&lt;/code&gt; available to be fed into a Customer#find database call. If your logger shows &lt;code&gt;Parameters: {&quot;user_id&quot;=&amp;gt;&quot;43434&quot;}&lt;/code&gt; then you’ll only have &lt;code&gt;params[:user_id]&lt;/code&gt; available instead of the params[:customer_id]. In this case the parameter was misnamed, either in the Javascript/HTML form/Rails view that generated the request or within the parameter naming in the entry for that URL in the routes.rb file. In other cases you might have forgotten to include an important parameter altogether. In other cases again your parameters &lt;em&gt;are&lt;/em&gt; present and have the right names but you’ve confused the values each parameter contains. For example imagine your logs had Parameters: &lt;code&gt;{&quot;day&quot;=&amp;gt;&quot;25&quot;, &quot;month&quot;=&amp;gt;&quot;2014&quot;, &quot;year&quot;=&amp;gt;&quot;4&quot;}&lt;/code&gt;. This shows that you’ve confused the values of the month and year parameters.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Were the right SQL statements run?&lt;/strong&gt; Assuming, as is default in development mode, the &lt;a href=&quot;http://guides.rubyonrails.org/debugging_rails_applications.html#log-levels&quot;&gt;log level of your Rails application&lt;/a&gt; is set to “debug”, any SQL statements run in processing your request will be output in your logs. Sometimes these SQL statements differ from what you expect based on your Ruby code. For example there may be a method (e.g. a sneaky default_scope) adding a not-always-wanted condition to every one of your ActiveRecord scopes. For example I once had a default_scope that limited all searches of my Subject model to entries where the “deleted_at column is NULL”. A year later I’d forgotten about the deafult_scope and kept wondering why I was getting inaccurate results when I performed SQL queries against what I thought was “all” of my Subject models, but was in fact only all my &lt;em&gt;undeleted&lt;/em&gt; subjects. I only became aware of this issue by seeing that the SQL generated in the log contained this added statement about “deleted_at” being null &lt;code&gt;SQL (0.7ms) Subject Load (0.8ms) SELECT &quot;subjects&quot;.* FROM &quot;subjects&quot; WHERE &quot;user&quot;.&quot;id&quot; = 110 AND &quot;deleted_at&quot; is NULL&lt;/code&gt;;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Were the right templates and partials rendered?:&lt;/strong&gt; The Rails logs lists the various views and partials that were used to compile the frontend output, typically the HTML web page. If the wrong templates or partials appear listed here that indicates a mistake in your templating logic. A more complicated type of potential error here are “silent overrides”, which happen when your Rails application and its dependencies have two templates with the same name (e.g. _product.html.erb), and one version (say the one included within the gem “spree_social”) is rendered instead of the one you wanted (contained, say in the gem “spree_core”). Therefore, to debug these issues, pay attention to the full filename of the rendered partial in question.&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;Rendered /spree_social/backend/app/views/spree/_product.html.erb (0.0ms)
Rendered /backend/app/views/spree/admin/shared/_alert.html.erb (0.0ms)
Rendered /Users/jkinsella/.rvm/gems/ruby-1.9.3-p545@oxnotes/bundler/gems/spree-ecd9f3f29779/backend/app/views/spree/admin/shared/_tabs.html.erb
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Were any exceptions/warnings logged?&lt;/strong&gt; Unrescued exceptions appear alongside their error message and backtrace within your logs. When your front-end seems unresponsive, say after you click “save comment” and nothing happens, then check your logs to see whether an exception appeared.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Was the cache used?&lt;/strong&gt; Entries such as &lt;code&gt;Cache write: views/taxonomies_sidebar/2014-04-28&lt;/code&gt; show that your application has cached data at the key (view/taxon…). The corresponding read entry, &lt;code&gt;Cache read: views/taxonomies_sidebar/2014-04-28&lt;/code&gt; indicates that your application is pulling previously stored data at that key out of the cache. The presence and absence of cache reads and writes for given keys helps you debug caching problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Was the HTTP status correct?&lt;/strong&gt; At the end of a log entry for a request will be something like &lt;code&gt;Completed 200 OK in 1700.0ms&lt;/code&gt;. The three digit number after “Completed”, 200 here, is your HTTP status code. 200 indicates success, which is usually what you want for typical web-pages. In other situations, you specifically want other HTTP codes, be that for prudent redirecting (301, 302), communication of “unauthorised”(401), or acknowledgement of missing content (404). Often you’ll see the status code 500 in debugging, and rarely will this be desired, for this indicates an internal server error. Client-side Javascript code often branches depending on the HTTP status returned from an AJAX request, so these entries in the log will come in handy debugging issues here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tailed live Heroku logs:&lt;/strong&gt; Heroku doesn’t store your logs, it being a read-only file system, but luckily you can view live requests as they hit our website with &lt;code&gt;heroku logs -t&lt;/code&gt;. Pro-tip: leave this open in a terminal for some time (e.g. 20 minutes), then use the search function of your terminal app (Command + F) to search for the keywords which would indicate your bug. Unlike your development mode log, your production log is by default set to “info”, meaning that you won’t get information about caching or SQL commands run. When you want this additional information, increase the log level to debug with &lt;code&gt;heroku config:add LOG_LEVEL=&quot;debug&quot;&lt;/code&gt;. (This assumes you have set up your production.rb environment file to respond to ENV[“LOG_LEVEL”]) As soon as you’ve finished debugging switch the log level back to the default with &lt;code&gt;heroku config:add LOG_LEVEL=&quot;info&quot;&lt;/code&gt; otherwise our logs will fill up rapidly and become expensive to archive in the third party software we employ.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Archived logs:&lt;/strong&gt; As mentioned above, our production server sits on Heroku, which, as a read-only filesystem, doesn’t save our web-app logs for future reference. Therefore we use a third party service, LogEntries, to capture and store our logs. You can access the web-app interface for LogEntries through the Heroku dashboard, and choose time-ranges within which to search by keyword for application errors, HTTP statuses, specific parameters, or logged information you manually output from your application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Heroku Scheduler Logs:&lt;/strong&gt; View all the processes that Heroku has currently running for your application with &lt;code&gt;heroku ps&lt;/code&gt;. While a scheduled task is running you’ll see a process named something like scheduler.X, with X representing an integer number, say 1 in this case. You can inspect the logs of this scheduled process with &lt;code&gt;$ heroku logs --ps scheduler.1&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;s3 Access Logs:&lt;/strong&gt; Like many Heroku applications we store binary data on S3. Requests for this data sometimes completely skip our website, and this is done by intentionally as a performance optimisation of our own design. This means we lose potential debugging information. To remedy this we have enabled the optional s3 logging feature in the relevant Oxbridge Notes buckets (through the AWS S3 web console) and thereby created logs within a bucket &lt;code&gt;oxbridgenotes-logging&lt;/code&gt;. Information about interpreting these logs is found in &lt;a href=&quot;http://s3browser.com/amazon-s3-bucket-logging-server-access-logs.phphttp://s3browser.com/amazon-s3-bucket-logging-server-access-logs.php&quot;&gt;this article&lt;/a&gt;, and advice on using Ruby to read them in a usable manner is found &lt;a href=&quot;http://sixones.com/2012/11/06/s3-logs-into-combined-log-format.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alerts based on logs:&lt;/strong&gt; Through our production log archiving software, LogEntries, we can set alerts to be sent via email/Campfire/other services when the logs contain an entry matching a certain regular expression and optionally when that same entry matches a given number of times, e.g. once, ten times, one hundred times. This allows us to inform ourselves about errors that would not be reported by our Rails based exception notification, that is errors that happen outside of the Rails application. In particular these are errors at the level of Heroku platform, such as request time-outs, failure of our Rails app to boot at all, or failures of supporting services such as Memcachier, which are provisioned through the Heroku platform.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Intentional logging:&lt;/strong&gt; At any point in your application code you may ask the Rails logger to output some information, such as the contents of a suspect local variable. In the development environment logging variables is a poor mans debugger. I don’t like to make general statements but Ill make an exception here: it’s &lt;em&gt;always&lt;/em&gt; faster to throw in a binding.pry and poke around in the debugger. The intentional logging technique is used in production for bugs that are difficult or impossible to reproduce in your development environment, for example bugs involving third party services without reliable sandbox environments (hi Paypal!). The keys to intentional logging are a) label the variables (i.e. don’t output the contents of the variable paypal_response_code, which might be “420”, because alone and without context you will need to refer back to the code to understand what the hell a single line in your log with the number 420 means. Instead output “The Paypal response code is 420. They must live in Colorado. “) b) choose relatively unique keywords within your log statements so that you can search/grep weeks’ worth of logs and only return the results you want (you’ll probably get this benefit “for free” if you label your variables as per my last point); c) be careful that your log entry doesn’t itself cause an error (example: &lt;code&gt;Rails.logger.info {puts order.products.first.country }&lt;/code&gt; could blow up and cause the entire webpage to fail when there are no products, an error that would not exist without the added logging. Insulate against this class of error by adding protection against there being a nil, for example by inserting the try method into your chain &lt;code&gt;Rails.logger.info {puts order.products.first.try(:country)})&lt;/code&gt;; d) log out all variables that could potentially be useful in debugging. When you’re using intentional logging you’ll often feel that there’s a 90% chance that one specific variable is relevant, and only a 10% chance that another one is relevant. I’ve repeatedly found it useful to liberally add logging statements for all variables that might potentially be useful, my reasoning being that it’s cheap to add an extra logging statement, and slow and frustrating to realise after the fact that you have not logged enough information and need to modify the code, redeploy, wait for the bug to appear again, then interpret the log once more; e) never delete a logging statement, only comment it out. Why? Because bugs are like acne in that they keep reappearing, and you’ll be glad of your reusable commented out logging statements when it rears its ugly head again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Git</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-git.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-git</id>
   <content type="html">&lt;p&gt;Part 6 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-source-control-mirrors&quot;&gt;Git Source Control Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Git Search&lt;/strong&gt; &lt;code&gt;$ git log -Gturbolinks --pretty=oneline&lt;/code&gt; returns all git commits which added or removed “turbolinks”, be that a method name, code comment, or part of the documentation. Shockingly fast, this is irreplaceable for figuring out which commits caused a particular change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Git Log&lt;/strong&gt; The output to &lt;code&gt;$ git log&lt;/code&gt; details the changes made to the code as described by the git commit messages you type, starting with the most recent commit message. Perhaps these messages are enough for you to figure out what happened that might have broken your code, or at the very least to understand what your coworkers have changed. The default printout has a low information density, so I prefer to alias &lt;code&gt;gl&lt;/code&gt; in my ~/.bashrc file with &lt;code&gt;alias gl=&quot;git log --graph --pretty=&#39;format:%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset&#39;&quot;&lt;/code&gt; then call &lt;code&gt;$ gl&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Git Diff:&lt;/strong&gt; This command is priceless for comparing the present state of a specific file/folder with its state at a particular commit. &lt;code&gt;$ git diff 9ce85 -- config/routes.rb&lt;/code&gt; compares the state of the config/routes.rb file with its state at the commit 9ce85.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Git Blame:&lt;/strong&gt; Sometimes you cannot figure out the purpose behind a line of code. Perhaps the code isn’t as “self-documenting” as you hoped, or you find the associated comments opaque. You might have another chance to understand its intention through &lt;code&gt;git blame&lt;/code&gt;. Git blame acts upon a single file, indicating the commit SHA that last changed each line. In this way you can see &lt;em&gt;who&lt;/em&gt; last changed that line, alongside the commit message they entered in association with the committing of those changes to source control. These commit messages might explain the purpose of the code, for example in mentioning that the commit was intended to squash a particular bug. While git blame is available on the command line, the git blame UI on Github is far more usable (&lt;a href=&quot;https://help.github.com/articles/using-git-blame-to-trace-changes-in-a-file&quot;&gt;instructions on usage&lt;/a&gt;), so I recommended that instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Git Bisect:&lt;/strong&gt; Sometimes you have absolutely no idea what’s causing a bug, but you do know that the bug did not exist in a previous version of your code. By identifying the git commit that created the bug, you’ll dramatically narrow down your search for what exactly caused the issue. Git bisect solves this problem by allowing you to mark a commit you know for certain &lt;code&gt;contains&lt;/code&gt; the bug as “bad”, and another you know does &lt;em&gt;not contain&lt;/em&gt; the bug as “good”, and then checking out different versions between the two marked commits for you to test whether the bug is present. Testing may be carried out by you manually (e.g. refreshing the browser page and seeing if the visual boxes are still misaligned) then marking that commit as good or bad and moving on, or testing may be carried out automatically, using a shell script with that employs the standard linux protocol of exiting with the code zero for good and non-zero for bad. &lt;a href=&quot;http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History&quot;&gt;More detailed information about Git bisect is found here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Github issue reports for the gem:&lt;/strong&gt; When dealing with problems arising out of gems used (you’ll often know this because lines from the gem library will appear in key places in the stack trace produced by an error), it’s often fruitful to search within the issues section of the Github project for that particular gem. Perhaps someone has already solved the issue or created a fork without that error, a fact you’d learn by looking at the “Network” tab in Github and hovering over each commit message to check for a reference to that bug.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails with Custom Instrumentation</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-custom-instrumentation.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-custom-instrumentation</id>
   <content type="html">&lt;p&gt;Part 10 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;our-custom-instrumentation&quot;&gt;Our Custom Instrumentation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;debugging_id:&lt;/strong&gt; Within the HTML on some web-pages (product page, sample page) we place invisible code indicating the database ID of the object that page is based off, which you can use to quickly find the record within the Rails console during debugging sessions. This beats typing multi-parameter string-based searches. Deaden your doubts about the value of this techniques by comparing the short Product.find(313) with the clunky &lt;code&gt;Product.where(permalink: &quot;medicine&quot;, year:2011, institution: &quot;University of Oxford&quot; )&lt;/code&gt;. To see these debugging IDs open up a relevant page, enable the web-inspector, search (Command-F) for “debugging” and read the ID within the source code. Within the admin side of the website, where the placement of a visible debugging ID poses no risk of alienating customers, we often include the debugging ID within the page’s viewable HTML, obviating the need for inspect element.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Explanatory exception messages:&lt;/strong&gt; Improve exception messages by including information helpful for investigation or debugging. For example the pictured exception message returns the IDs you’ll need to refer to in the console.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exception Reports:&lt;/strong&gt; Whenever an unrescued exception is raised, the “exception_notifier” gem emails an exception report to the IT team. These contain an exception message, a backtrace and other information about the state of the software when the exception was raised. I often find the default information provided inadequate for debugging, so I insert a “rescue” statement, manually trigger the exception notifier with additional data, then re-raise the exception so that the code flow continues as if we had never interfered. For example:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Archived Exception Reports:&lt;/strong&gt; Exception reports, having arrived into our Gmail account, are searchable through the Gmail interface. We used Gmail filters to label all incoming exception emails within Gmail as “exceptions”, meaning that we can do searches such as “ProductGenerator label:exceptions after:2014-3-17” to find all exceptions after 17th of March that mention the ProductGenerator class. (This assumes you archive exception emails instead of deleting them outright). I particularly like this approach for data-integrity issues, by which I mean cleaning database records following faulty SQL caused by a bug. Case in point: I received exception reports after running an erroneous Rake command and I wanted to see how many exceptions affected the product with ID 252, so I searched Gmail for “Spree::Product 252 label:exceptions after:2014-3-17”, and Gmail found all the archived exception reports containing both Spree::Product and the number 252. For this approach to work it assumes that you archive instead of delete your messages in Gmail/the desktop/phone applications you use to access Gmail. I mention multiple clients because, as I learned the hard way, each one might need to be configured separately.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Previous Debugging Records:&lt;/strong&gt; This one is highly specific to the Oxbridge Notes process for debugging, whereby even if no-one else will ever read the report, we record every thought about the bug, every experiment or fix tried, and every ruled out hypothesis into a file within the folder documentation/bugs. Before fixing a new bug search through this folder using the ack utility to find various identifying information pieces (such as the ExceptionName, part of the exception message, or the user_id in question). Often our previous bug reports will provide important clues on how to fix the current bug or on dead alleys down which we previously squandered our time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MailView:&lt;/strong&gt; Quickly verify that all our emails compile and proof-read their contents by visiting /mail_view from development mode. This feature relies on the &lt;code&gt;mail_view&lt;/code&gt; gem. For every new email our software is supposed to send, you must add a corresponding entry to the app/mailers/mail_preview.rb file for that email to appear in this previewer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Logging in as a particular user:&lt;/strong&gt; Sometimes you have to walk a mile in a user’s shoes to understand why your software broke. To do this &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-postgres-import-export&quot;&gt;download the production database freshly to your development machine&lt;/a&gt; (so as to take into account recent changes that might influence the bug), find the user experiencing bugs in the Rails console &lt;code&gt;user = User.find_by_email &quot;something@hotmail.com&quot;&lt;/code&gt;, then reset that user’s password to something generic (we have a custom method to do just that: user.default). This method will print out a new password for that user, and you can use this to log in as that user in development mode. This new password does not affect the user’s production account, which retains the password as the user originally set it. (And yes, logging in as a user is acceptable in our business since this debugging technique is outlined within our website’s privacy policy and the most sensitive information you’d see by doing this is a customers purchase history, information that was already readily available in our standard Admin area.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Failed Delayed Jobs:&lt;/strong&gt; We use the “delayed_job” gem to queue up background tasks, but by default this does not alert you whenever a background task fails. Thats a lot of important missing information therefore thanks to a custom modification we made to DelayedJob (&lt;a href=&quot;https://gist.github.com/jackkinsella/842395841a0fff204e35&quot;&gt;gist&lt;/a&gt; here), an email is sent every time an exception is raised during a background job with heaps of useful debugging information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Undeleted Failed Delayed Jobs:&lt;/strong&gt; The exception notification system for DelayedJobs outlined above has been known to fail in the past, and in such cases you want to refer to the DelayedJob database items in production for further debugging. Check for the presence of jobs with errors in production by typing our custom DelayedJob &lt;code&gt;scope Delayed::Job.with_errors&lt;/code&gt;. If any results appear then view the error backtrace for an individual failed job with &lt;code&gt;puts failed_job.last_error&lt;/code&gt;. Read the calling function that caused the error, alongside its inputs with &lt;code&gt;puts failed_job.handler&lt;/code&gt; (we use puts in both cases because it displays the yaml output in a readable manner). Example output (Ill explain below)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that the above output shows the caller’s object type (Email), the method called on it (send_zip_file), the arguments to the method, such as the email address for the emails from field, would have been below, but I removed them from the screengrab to protect the identity of my customers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;S3 files and folders&lt;/strong&gt; Access your s3 account either through AWS web application dashboard or through third party desktop software such as s3Hub. Once in, inspect various folders to insure that the right files were uploaded/deleted in the right directories, and appear with the right filenames and with the correct headers and permissions. If you’re not sure what folder a particular model saves its data to, refer to that model’s source code and look at the first argument to &lt;code&gt;has_attached_file&lt;/code&gt;. For example &lt;code&gt;has_attached_file :data&lt;/code&gt;, means you want to browse to the /datas folder on s3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Never Swallow an Error:&lt;/strong&gt; Some errors and failures are so routine that they can hardly be called exceptional. For example, certain document conversion operations we carry out at Oxbridge Notes have a failure rate. The nicest possible solution would be to fix the root cause once and for all. Absent a year-long study of the .docx file format and the C# programming language, that aint going to happen. The next best thing is to accept the failure within our normal code flow, but save that information within the database for later, in case we want to retry the operation, use an alternative algorithm, or simply control user-flow based on this information. I use the [&lt;a href=&quot;https://github.com/pboling/flag_shih_tzu&quot;&gt;FlagShihTzu&lt;/a&gt; gem for this purpose because it enables me to add an ever-increasing number of true/false attributes with names of my choosing to a single column in my models database table, by default on the column flags. This means that as the list of possible errors increase, I can add the capacity to record these errors without needing to modify the database. When it comes to debugging, I can quickly ascertain that this particular record had experienced issues, say with image_extraction.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails With Chrome DevTools</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-chrome-devtools.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-chrome-devtools</id>
   <content type="html">&lt;p&gt;Part 11 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;chrome-devtools-mirrors&quot;&gt;Chrome DevTools Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Chrome DevTools Elements:&lt;/strong&gt; The Elements tab is helpful in debugging HTML and CSS and for receiving rapid feedback about experimental design changes. To activate DevTools Elements right click a HTML element on any webpage and select “inspect element”. You’ll see a pane that includes the source code of the final HTML page, as output by your Rails application. Useful features here include dragging and dropping elements into different positions within the HTML source code (thereby modifying layout), swapping HTML tags names by double clicking and renaming (e.g. double click a “p” element and type “h1” to transform it), modifying a HTML attribute (e.g. changing “class=big” to the “small” class by clicking “big” and typing), and adding a new HTML attribute by double clicking the element in question and typing out the attribute. In the right hand column of the Element pane you have tools for working with CSS. Begin by selecting a HTML element in the left hand pane (e.g. a div element you’d like to style differently). In the “styles” tab you’ll see the CSS selector classes (e.g. div.large_box ) and the CSS styling commands attached to that selector, giving you an oversight of all the CSS selectors that operate upon that particular element, information not easily discerned from reading CSS files (due to the compilation of many CSS files, presence of inline stylesheets and Javascripts that modify the pages style). Next hover over one particular styling command (e.g. font-size) and you’ll see a tick box that enables you to turn the style off temporarily (refreshing the page returns the style to normal). Double click the value assigned to that styling command (e.g. the 12px, attached to font-size), and you can modify it, either by typing a new value or using the arrow keys to select another value. Double click on the closing brace “}” of any selector to add a new CSS statement (e.g. font-weight: bold) . As you already know, CSS layouting sucks. Thankfully, clicking on the “computed” tab in DevTools Elements shows a coloured diagram of the selected element, with its pixel size, alongside its padding, border and margins. Finally, click on the “event listeners” tab (which is usually hidden by an expand options arrow) to see a list of the Javascript events (e.g. click, double click) and elements (e.g. p, h1) that have some Javascript functionality attached.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Chrome DevTools JS Errors:&lt;/strong&gt; Open up any web page then activate the Chrome Javascript Console (Command+Alt+J). Look for automatically detected Javascript errors. Should you have any of these, such as a syntax error caused by using an incorrect character to end a line (e.g. a colon instead of a semicolon), then you’ll see a clickable red “x” sign in the top right of the DevTools menu. Clicking will detail the error&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Chrome DevTools Console:&lt;/strong&gt;. Activate with (Command+Alt+J) and you have a REPL console at your disposal for executing Javascript code and running experiments on page. One gotcha: when debugging your Javascript be aware that due to minification and uglification by Rails, you might only be able to see the Javascript code in human-understandable format within development mode.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Chrome DevTools Javascript Debugger:&lt;/strong&gt; Refer to &lt;a href=&quot;https://developer.chrome.com/devtools/docs/javascript-debugging&quot;&gt;Google’s excellent documentation on DevTools Debugger&lt;/a&gt; for details. Here’s the most important parts with regards to debugging Rails:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;set debugging breakpoints by inserting the keyword “debugger” into your Javascript source code or entering it visually within DevTools (Sources &amp;gt; Select JS File &amp;gt; Click on some line number so that a blue tag appears). The JS debugger functions much like binding.pry above.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;set Javascript conditions for the breakpoint to trigger (Right click “edit” when hovering over a breakpoint)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;view the call stack (i.e. backtrace) and list variables in action at that point (Sources &amp;gt; Call Stack)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;bring up the Javascript console to look around or experiment within the function where the breakpoint was called (keyword ESC)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;hover over variables within the breakpointed code in the left-hand panel to reveal their currently assigned values&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;set breakpoints on Javascript events, such as whenever you click or keypress (Sources &amp;gt; Event Listener Breakpoints)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;set breakpoints on XHR (AJAX) requests to a specified URL (example usages: when a download for the file /chapter_1.txt starts; when a form POSTs to one of your Rails routes) (Sources &amp;gt; XHR Breakpoints &amp;gt; +)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;pretty print, such that minified Javascript that otherwise has its entire contents written onto one massively overloaded line of code, is spread out onto many separate lines, making it easier to read and visually insert debugging breakpoints. (Source Code File &amp;gt; Curly Braces)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Jump to a particular function by popping up an autocomplete search containing all the function names(Command + Shift + 0). Much like using Ctags in your text editor.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;set breakpoints on DOM manipulations of a specific HTML element (e.g. when a paragraph is added/removed from a div; when an elements “hidden” attribute is modified). (Elements Tab &amp;gt; Select Element &amp;gt; “Break On”).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Chrome DevTools Network tab:&lt;/strong&gt; Sometimes you want to inspect what resources (images, documents, APIs, Javascripts, css files) were requested by your application, and whether these successfully downloaded. Chrome DevTool’s Network tab provides a listing of each resource requested alongside the HTTP method used and the HTTP status returned (e.g. 200, 404), For greater detail click on one of these resources and you’ll be able to view HTTP headers (including caching information, accept headers and host information), or preview the contents of a resource. If you see no resources within the Network tab despite expecting otherwise, then you need refresh the page, this time with the web inspector open before requesting/refreshing the page.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rails With Built-in Tools</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/debugging-rails-with-built-in-tools.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/debugging-rails-with-built-in-tools</id>
   <content type="html">&lt;p&gt;Part 2 in the series &lt;a href=&quot;/2014/06/06/a-comprehensive-guide-to-debugging-rails.html&quot;&gt;A Comprehensive Guide To Debugging Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby--rails-built-in-mirrors&quot;&gt;Ruby / Rails Built-in Mirrors&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ruby compiler checks:&lt;/strong&gt; Run &lt;code&gt;$ ruby -c myfile.rb&lt;/code&gt; to ask Ruby to check the syntax of your script and find serious errors that would stop your program from even starting. The syntax checker does not actually run your code, so there’s no need to worry about the program being syntax checked performing some destructive action that would occur were the code executed normally. Given the size of a Rails project, it would be a pain in the ass to run this command after every file change. Luckily for us, editor plugins such as Syntactic automatically run the syntax check on saving a file, displaying any resulting errors within Vim.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gemfile.lock:&lt;/strong&gt; Contains the exact list of gems used within your application and their version numbers. Useful to refer to because your normal &lt;code&gt;Gemfile&lt;/code&gt; only displays a fraction of the gems within your application: a single gem within your Gemfile may require 10 others as dependencies, and these extra gems pulled in will only be listed within your &lt;code&gt;Gemfile.lock&lt;/code&gt;. That’s not the only reason you should refer to the &lt;code&gt;Gemfile.lock&lt;/code&gt; page. Often, and for good reasons, we do not fully specify our gem’s version number in the &lt;code&gt;Gemfile&lt;/code&gt;. For example you might see optimistic versioning such as ‘&amp;gt;1.0.1’ or ‘~&amp;gt;1.1’, which could result in a wide variety of exact versions in use. When troubleshooting, figure out the exact version by referring to the Gemfile.lock.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Middleware lister:&lt;/strong&gt; Rack middleware is a filter that can be used to intercept a web request and alter the response. Some Rails or Rack related gems insert middleware at various stages in the request, and when debugging you sometimes need to be aware of what middleware has been added and in what order. Run &lt;code&gt;$ rake middleware&lt;/code&gt; to list the middleware in use. This command can also be useful to ensure that custom middleware you added was picked up by the Rails application and placed in the right place within the middleware chain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;View application routes:&lt;/strong&gt; List all the URLs your Rails application responds to, the associated URL helpers available within your controllers and views, the parameters each URL expects, and the controller action that route maps to. With pre-Rails 4 you’ll need the &lt;strong&gt;sextant&lt;/strong&gt; gem installed to view at &lt;a href=&quot;http://localhost:3000/rails/routes&quot;&gt;http://localhost:3000/rails/routes&lt;/a&gt;, with Rails 4 the same output is viewable at &lt;a href=&quot;http://localhost:3000/rails/info/routes&quot;&gt;http://localhost:3000/rails/info/routes&lt;/a&gt;. In all versions you can also list the routes after a brutally long load time with the command line $ rake routes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SQL database access:&lt;/strong&gt; Useful to run SQL commands manually when debugging, exploring, or dealing with data integrity issues not easily repaired at the Rails levels (such as primary key problems). Access in production with &lt;code&gt;$ heroku run dbconsole&lt;/code&gt; and in development with &lt;code&gt;$ rails dbconsole&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;List available rake tasks:&lt;/strong&gt; Rake provides command line interfaces to maintenance tasks in your Rails app, many but not all of which are related to modifying the database structure. &lt;code&gt;$ rake -T&lt;/code&gt; lists all these Rake tasks and prints not just those built into Rails, but also those packaged into your included gems or added by us through custom code within with our projects &lt;code&gt;Rakefile&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;better_errors / frames:&lt;/strong&gt; OK this one isn’t built into Rails—you need to add two gems to your Gemfile: “better_errors” and “binding_of_caller”. Once installed these gems operate in the development environment such that any unrescued exception raised when using the web application from the browser will show the “better_errors” debugging error page instead of the less informative standard Rails error page. The key helpful features with “better_errors” are a) the possibility to inspect local and instance variables; b) the possibility to do code experiments in the REPL provided; and c) the possibility to navigate to any previous frames in the stackframe (see the section on debugging for further explanation of frames). Failing AJAX requests will not usually show the “better_errors” page, since typically no new webpage was requested. To see the “better_errors”” console following a failed AJAX request, visit the URL /__&lt;code&gt;better_errors&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>A Comprehensive Guide To Debugging Rails</title>
   <link href="http://www.jackkinsella.ie/2014/06/06/a-comprehensive-guide-to-debugging-rails.html"/>
   <updated>2014-06-06T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/06/06/a-comprehensive-guide-to-debugging-rails</id>
   <content type="html">&lt;p&gt;The most important tool a musician owns is not their instrument; it’s their mirror. Observable physical issues precede degradations in sound, and the saxophonist practicing “blind” may never notice that a misplacement of their thumb over a key caused the grating tone that has tormented them-and their neighbours-for months.&lt;/p&gt;

&lt;p&gt;Code problem identification, which is the essence of debugging, benefits similarly from the use of observation, but its mirrors, peering instead into a software process, take the form of logs, debuggers, alerts, OS-level tools, and the instrumentation you design and insert into your codebase.&lt;/p&gt;

&lt;p&gt;For three months I’ve jotted down every mirror I glance at when tending to &lt;a href=&quot;http://www.oxbridgenotes.com&quot;&gt;Oxbridge Notes&lt;/a&gt; as part of my efforts to create documentation that will enable another programmer to take my place. This article therefore focuses on the mirrors available to a programmer like me, a web developer working with legacy code in Ruby on Rails, Javascript, Git, OS X, and Heroku. The specifics differ to the extent that your stack deviates from mine, but any web developer should find some measure of value in these techniques.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-built-in-tools.html&quot;&gt; Ruby / Rails Built-in Tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugginging-rails-with-pry-console.html&quot;&gt; Pry Console &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-pry-debugger.html&quot;&gt; Pry Debugger &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-operating-system-tools.html&quot;&gt; Operating System Level Mirrors &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-git.html&quot;&gt; Git Source Control Mirrors &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-online-or-third-party-tools.html&quot;&gt; Online and Third Party Mirrors &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-logs.html&quot;&gt; Logs, aka Historic Mirrors &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-memcached.html&quot;&gt; Memcached Mirrors &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-custom-instrumentation.html&quot;&gt; Custom Instrumentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/06/debugging-rails-with-chrome-devtools.html&quot;&gt; Chrome DevTools Mirrors &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d like to credit Ed Tee at &lt;a href=&quot;http://gigsounder.com&quot;&gt;GigSounder&lt;/a&gt; and
&lt;a href=&quot;http://richardconroy.blogspot.com&quot;&gt;Richard Conway&lt;/a&gt; for help with
proof-reading and feedback, and to thank &lt;a href=&quot;http://hackerretreat.com/&quot;&gt;Hacker Retreat
Berlin&lt;/a&gt; for providing me with brilliant
programming mentors and teachers.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Passive Income</title>
   <link href="http://www.jackkinsella.ie/2014/04/24/on-passive-income.html"/>
   <updated>2014-04-24T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2014/04/24/on-passive-income</id>
   <content type="html">&lt;p&gt;On 23 April, 2014 I gave this speech to the Berlin chapter of the &lt;a href=&quot;http://www.meetup.com/4HWW-Entrepreneurs-and-Lifestyle-Designers&quot;&gt;4
Hour Work Week Entrepreneurs and Lifestyle Designers
Group&lt;/a&gt;.
The focus is on passive income, and it applies chiefly to people
starting out, but is also of interest to established business owners
wishing to remove their labour with minimum sacrifice in quality.&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;For the last four years I’ve been blessed with a passive income source where the
entire sales process is automatic and, if I so desire, I can forget
about the income source for months on end and still meet my financial needs.
When I moved to Berlin just shy of two-and-a-half years ago, I brought
my source of income over with me on a USB stick.&lt;/p&gt;

&lt;p&gt;In this speech I’ll break down the basic freedoms supplied by a passive
income source, I’ll reveal how I devised my one, &lt;a href=&quot;http://www.oxbridgenotes.co.uk&quot;&gt;Oxbridge
Notes&lt;/a&gt;, and I’ll share the advice I wish
I had heard when I was starting out, with the hope of sparing you the
same mistakes I made.&lt;/p&gt;

&lt;p&gt;What do I do? I conjecture that you’re already rolling your eyes and
thinking “oh no, not another goddamn startup pitch”, so I’ll limit
myself to two sentences: I run a website where students at prestigious
universities upload notes they created during their university studies
to help them ace exams and &lt;a href=&quot;http://www.oxbridgenotes.co.uk&quot;&gt;sell these
notes&lt;/a&gt; to others.  I charge an average
of 30 euro per set of notes and take a 50% cut.&lt;/p&gt;

&lt;h2 id=&quot;the-great-freedoms&quot;&gt;The Great Freedoms&lt;/h2&gt;
&lt;p&gt;Introductions out of the way, let’s examine the main reasons why you
might want a passive income stream. To my mind, it’s all about freedoms:
freedom of location, free time in that you have a low number of hours
required to work, freedom of scheduling, in that you have flexibility to
choose when any necessary hours are, and freedom of boss.&lt;/p&gt;

&lt;p&gt;Realizing all four freedoms at once will be more difficult than
achieving only one or two of them, so think about which freedoms have
the highest priority to you in designing your passive income stream and
working towards having all four freedoms. You might even be able to win
one of these freedoms within the next week by tweaking some part of your
current working arrangement.&lt;/p&gt;

&lt;p&gt;Most of you would have heard of financial leverage, for example buying a
house with borrowed money in the hope of multiplying gains should the
price of the house rise. You probably haven’t heard of “freedom
leveraging”, that is where you gain one freedom in your working
circumstances, then leverage that new freedom to win the others. For
example, you start by attaining freedom of location and use this to move
to a country with lower costs of living, thereby reducing the number of
hours you work and securing freedom of time.  Next, you invest these
newly gained hours into building the skills that will free you of a
boss, and so on and so forth.&lt;/p&gt;

&lt;p&gt;Let’s examine these freedoms in a little more detail, and talk about how
you might begin to access them:&lt;/p&gt;

&lt;h2 id=&quot;freedom-of-location-working-from-anywhere-in-the-world&quot;&gt;1 Freedom of location (working from anywhere in the world)&lt;/h2&gt;
&lt;p&gt;This freedom empowers you to earn your keep while travelling or take
your job with you when you relocate to a new place.&lt;/p&gt;

&lt;p&gt;For you to be location free doesn’t necessarily mean colossal changes to
your current working arrangement. You might simply ask your current boss
if they are willing to experiment with remote working, or find another one
who is. Increasingly, such companies exist.&lt;/p&gt;

&lt;p&gt;For example, my freelancers at Oxbridge Notes are location free, which
suits me fine since I don’t have an office. The freelancers enjoy the
working conditions, and that makes Oxbridge Notes a more attractive
place to work. I’m glad that I can provide nice working conditions.&lt;/p&gt;

&lt;h2 id=&quot;freedom-of-time-low-number-of-hours&quot;&gt;2 Freedom of time (low number of hours)&lt;/h2&gt;
&lt;p&gt;Spending less time doing unpleasant tasks, or “work” to meet your
financial needs means more time on your hobbies, your creative projects,
your skill-building and your pleasures. I heard a figure thrown around
in entrepreneur communities that 100k/year without having to work is
worth 700k/year when you need to work full time to achieve it.  The
figure was probably born at 2am in some city pub, but origins aside, the
order of magnitude sounds about right to me.  Earning full-time pay with
only a fraction of the normal time is a radical improvement in quality
of life. Psychiatrists shouldn’t prescribe antidepressants: they should
prescribe passive incomes.&lt;/p&gt;

&lt;p&gt;For some, freedom of time can be achieved with tweaks in their
current setup.  For example if you earn a high hourly rate freelancing
(say $150/hour as iPhone developers with US clients pull in), and your
financial needs are modest, then you could, as I know people in Berlin
actually doing, work solidly for two months per year then take the next
ten off. The guy I have in mind likes his booze, so he runs a hobby bar
that breaks even during the rest of the year. A nice arrangement, and
one that’s quite achievable to those with the right skills and the right
network.&lt;/p&gt;

&lt;h2 id=&quot;freedom-of-scheduling-flexibility-of-when-those-hours-are&quot;&gt;3 Freedom of scheduling (flexibility of when those hours are)&lt;/h2&gt;
&lt;p&gt;Freedom of scheduling is not quite the same thing as freedom of time.
If you work only one hour per week, but are required, without fail, to
be at a computer for one minute every four hours of the clock that
pass, forgoing sleep, romantic partners, parties or travel arrangements,
then you have dreadful working conditions.&lt;/p&gt;

&lt;p&gt;I don’t see this freedom highlighted enough in the 4HWW community, but
you ought to consider how frequently, at what times, and with what
regularity your passive income stream requires you to be present to work
For example, before I outsourced customer service, I needed to check my
emails at least once every two days, which, limited certain types of
travel where I was without WI-FI, and lead to great stress when I
couldn’t get online.&lt;/p&gt;

&lt;h2 id=&quot;freedom-of-boss&quot;&gt;4 Freedom of boss&lt;/h2&gt;
&lt;p&gt;Having a superior isn’t as much fun as being your own boss. You have to
adapt to your boss’s way of doing things and to be polite and
people-pleasing, when sometimes you just want to scream at them for
being unreasonable. You don’t &lt;em&gt;feel&lt;/em&gt; independent when someone is telling
you what to do and how to do it, and, most of all, you don’t &lt;em&gt;have&lt;/em&gt; true
independence when someone has the power to fire you and remove your
income stream.&lt;/p&gt;

&lt;p&gt;Of course, absent a superior, it means that you must take in hand
ultimate responsibility for ensuring everything goes smoothly, and you
have no mentor to train you or help you in a fix. For this reason, you
buy this freedom at a cost to your worry levels, and you raise the threshold
of skills you are required to develop in order to maintain your income
stream.&lt;/p&gt;

&lt;p&gt;All in all, having a boss is not wholly incompatible with the other
freedoms, so you might accept having a boss as a compromise in your
lifestyle design.&lt;/p&gt;

&lt;h2 id=&quot;devising-your-passive-income-stream&quot;&gt;Devising Your Passive Income Stream&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Profitable business, as I see it, is producing something that other
people want so badly that they’ll part with their hard-earned cash in
exchange for it, with the necessary added condition that you have
created this product and found customers at a low cost in your
time/effort/resources.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That leads to the two most basic questions you should ask yourself when
crafting a passive income stream.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What do your current talents and skills enable you to produce,
cheaply, that other people will pay for? If you ain’t got no skills,
then you’ll need to develop some before you have a remote chance of a
passive income. Baring inheritance, you don’t get something for nothing
in this world.&lt;/li&gt;
  &lt;li&gt;How do you propose to locate and convince paying customers, and
deliver the products to them? In short I’ll call this your
“reaching”. Others call it “marketing”, but I find the term
“reaching” more helpful in imagining the actual actions you will be
required to take in order to make sales.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To put the above into perspective I’ll acquaint you with the story of how I
thought up Oxbridge Notes.&lt;/p&gt;

&lt;p&gt;I graduated college with a law degree; went to work in a London law firm
as an intern and during my time there I shrunk at the thought of how
repetitious and boring it would be to sit in the same office for 35
years.  No salary, no matter how handsome, could convince me to
sacrifice my thirst for adventure and variety, and I realised
that despite the effort I had put into my legal studies, I did not
want to be a corporate lawyer. To use the language of economics, it was
a sunk cost.&lt;/p&gt;

&lt;p&gt;Around this time I saw 4HWW(The Four Hour Work Week) in a bookshop,
flipped through it, and fell in love with the idea. I never bought or
read the book: all I needed was to know that it was possible to earn
money in a location-free, low-time-commitment manner. Just &lt;em&gt;knowing&lt;/em&gt;
that something can be done empowers a person to achieve what they
previously thought impossible. I believe it’s for this reason that as
soon as an athletic world record is broken, such as the four minute
mile, many other athletes soon reach and surpass that same benchmark.&lt;/p&gt;

&lt;p&gt;For a week I brainstormed on what value I could provide. I looked at my
skills (passable writer, HTML/CSS, undergraduate legal education), my
interests (music, self-improvement, technology), my assets (the thousand
pages of notes I had written in college), and the prospective partnerships
within my social network (I had a friend in Bolivia who wanted to
import wood and leather into Europe and needed European assistance).&lt;/p&gt;

&lt;p&gt;I examined each of the values I could provide and asked myself how I
could cheaply deliver that good to customers in a manner that allowed me to be
location-free and time-free. (At this time I didn’t think about the
freedoms with as much granularity as I do today.)&lt;/p&gt;

&lt;p&gt;One of the ideas on my list that didn’t make the cut was “College
Admissions Tutor”. I believed that local parents would pay top euro for
assistance in getting their child into a prestigious university. I
suspected I could reach the customers through advertising at secondary
schools for rich kids and through advertising in local newspapers, so I
thought myself to have reachability covered. I would not, however, be
location free because I’d need to be in a room somewhere with these
kids.  Let’s be realistic: VOIP services like Skype are, even to this
day, too unreliable to tutor online.&lt;/p&gt;

&lt;p&gt;One of the most powerful slogans I developed for scoring my options was
“the ideal income stream would be one where I produce something once
then sell many times”. Professional writers, like &lt;a href=&quot;http://adam-fletcher.co.uk/&quot;&gt;Adam
Fletcher&lt;/a&gt; speaking before me, embody this
model. Selling information or monetizing a website also fit this bill.
Since I had about 200 hours experience fooling around with programming
in my spare time, I felt I knew enough to build a basic interactive website,
so I decided to limit my search to website ideas.&lt;/p&gt;

&lt;p&gt;I started by building an example of the crappiest of all website categories: a directory. The
beauty of a directory is that it’s simple enough for an extremely newbie
programmer, and the straightforward business model is every bit as suited to a newbie
businessman.  My pitch went like this: You’re a lawyer in Ireland, you
have no website, you pay me 100 euros a year for your place on
“findsolicitors.ie”. The Yellow Pages telephone directory in my parent’s
house had a list of every lawyer in the country’s contact details, and
there were industry-specific magazines circulated to the Irish legal community, meaning
that, in combination, I could foresee getting enough of the
attention of my customers to have a chance to sell access to my
directory.&lt;/p&gt;

&lt;p&gt;I built this website over a few weeks and once it was done, I’m ashamed
to admit this, I didn’t have the courage to release it and market it. I
felt intimated by the legal community and socially anxious about putting
myself out there and risking failure.  Ridiculous, in retrospect, but I
disclose it because your self-confidence, or rather lack of, will crush
any chances you have of 4HWW.&lt;/p&gt;

&lt;p&gt;I set my sights lower than marketing to the legal community and modified
the lawyer directory website to showcase private secondary school tutors
instead of lawyers. Johnny is bad at Math - use this website’s search
feature to find a teacher in your Irish town that will teach Johnny
after he comes home from school. Teachers get their profile for 40 euro/year.&lt;/p&gt;

&lt;p&gt;I read up on SEO and optimised the website for Google with a few tricks
before launching. (e.g. I added three random parental-friendly jokes
onto more than a thousand blank pages for various Irish cities in the
hope that it would be enough content for Google to bother indexing the
page and awarding me a search result. To my amazement it was.) A few
weeks later I got my first sale, and it felt positively wonderful! For
the first time in my life I had earned money directly from the market,
without a middleman, and all of my own design and doing. I felt such
pleasure and self-worth at the achievement, feelings that I still
experience every time I think about sales in my current business.&lt;/p&gt;

&lt;p&gt;I had a few more sales from the private tutors website, but it only ever
made a few hundred euros. Seeing that it wasn’t taking off, I
returned to the drawing board and decided to construct something else.&lt;/p&gt;

&lt;p&gt;In college everyone in my year said I made excellent notes, so I
resolved to sell my old university law notes online. I edited my Word
documents to remove any copyright infringing parts, and asked a few
classmates for permission to use the areas they covered but I missed
out. I coded a basic HTML website with a simple CSS template, and it took me
nine days to design the website, write the copy, get a shopping cart
plugin working, create free samples and eventually launch. Post launch I
sat back and waited but, unlike with my tutors website, no sales
happened through my SEO efforts.&lt;/p&gt;

&lt;p&gt;At the time I was watching the TV show “The Wire” and one of the
characters, &lt;em&gt;Proposition Joe&lt;/em&gt;, said something that really resonated with
me. Business is simple, you gotta “buy for a dollar, sell for two”.
Although I took the meaning a little out of its intended context, the message for me
was that “you need to spend money to make (more) money”. So, with great
reluctance, I opted to pay for online advertising via Google Adwords.&lt;/p&gt;

&lt;p&gt;And when I did it was magic; I had switched on a garden hose of sales.
My notes being a new product that no-one yet owned, and it being exam
season, I sold a couple of thousand euros worth of the stuff in the first
month, so much that I flew to Japan for a month and Bolivia for three,
enjoying myself and operating the website from coffee shops and hostels. Sure, I paid
Google a chunky proportion of my income, but I wouldn’t have gotten
any sales without advertising, so I was delighted with the partnership.&lt;/p&gt;

&lt;p&gt;I knew that my notes would fall out of date the following year, so I
resolved to turn the website into a platform where other students would
provide the content and I share the profits. I bought a stack of books
on programming, and &lt;a href=&quot;http://www.jackkinsella.ie/2011/12/05/janki-method.html&quot;&gt;studied them in detail
&lt;/a&gt;, a task which
was initially difficult and time consuming, but an investment I’m glad
of having made. My efforts to future-proof Oxbridge Notes worked and my
income stream survived. In exchange for my risk-taking, I’ve been
rewarded a dream 20s, one in which I’ve indulged my interests beyond the
farthest reaches of normality, travelled extensively, and had no boss
other than my customers.&lt;/p&gt;

&lt;p&gt;That’s my story to date. Let’s look at some details that I wish I knew
when I starting off.&lt;/p&gt;

&lt;h2 id=&quot;detailed-pointers&quot;&gt;Detailed Pointers&lt;/h2&gt;

&lt;h3 id=&quot;build-your-income-stream-from-the-ground-up-using-fresh-web-accounts&quot;&gt;Build Your Income Stream From the Ground Up Using Fresh Web Accounts&lt;/h3&gt;
&lt;p&gt;When I started Oxbridge Notes I used my personal email address for the
web services I relied upon, such as my web server hardware, my Paypal
account, my Google Docs, whatever. Then, once I hired help, I had to
switch my accounts, sometimes with great annoyance, to be registered
with the info@oxbridgenotes email address.&lt;/p&gt;

&lt;p&gt;I advise you all to begin your passive income journey by creating an
artificial separation between everything personal and everything
associated with your income stream. It might seem easier to use your
personal account with some provider for “one little thing”: trust me, it
isn’t and you’re about to fall into a trap.&lt;/p&gt;

&lt;h3 id=&quot;be-productivity-obsessed&quot;&gt;Be Productivity Obsessed&lt;/h3&gt;
&lt;p&gt;Revisit our earlier definition of business:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Producing something that other people want so badly that they’ll part
with their hard-earned cash in exchange for it, with the necessary added
condition that you have created this product and found customers at a
low cost in your time/effort/resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A successful 4HWWer is someone who delivers equivalent value in four
hours of work as another person does in 40 hours. Think about your
working day: how much is spent browsing Facebook? Doing “facetime” to
please your coworkers? In unproductive meetings?  Fine-tuning something
that doesn’t provably impact product quality or increase sales
significantly? I would guess that the average worker could do as good
a job in 30% of the time with discipline and sensible productivity
techniques.&lt;/p&gt;

&lt;p&gt;Productivity has the stereotypical image of a hyper-caffeinated
life-hacker with 90 tabs opened in their web-browser, working while
jogging on a desk treadmill and flossing at the same time. The kind of
productivity you should be concerned with is not that; it’s no more and
no less than finishing, advertising and shipping a product in as little
time as possible.&lt;/p&gt;

&lt;p&gt;This kind of productivity means you are only as productive as the
weakest link in the chain between idea and finished product in your
customer’s hands, meaning that you’ll need to focus on improving your
speed in all the processes along that trail. Most importantly you need
to cull analysis paralysis by cultivating the ability to quickly make
and thereafter stomach decisions where all options are less than ideal.&lt;/p&gt;

&lt;p&gt;I recommend that you set yourself the goal of getting your first sale
within 120 hours of beginning to produce your passive income stream.
Yes, that limits the scope of what you can produce to something
simple, but on the plus side you are forced to tackle all aspects of the
business, and practice productivity in the sense I belaboured above.&lt;/p&gt;

&lt;p&gt;There’ll be plenty of time for your bigger ambitions once you have a
passive income and a ton of free time. The most important thing for you
now is to practice the full stack of basic business.&lt;/p&gt;

&lt;p&gt;Some perils of particular danger to the new passive income earner are going to
“business coffees” with like-minded people, saying “yes”  to oddball
customer requests (i.e. providing a service you don’t normally do, when
it’s inefficient for you to do so, instead of telling the customer
“sorry we don’t do that, but try this great other thing we offer”), and consuming productivity porn, such as
reading blogs on productivity instead of, well, &lt;em&gt;being&lt;/em&gt; productive.&lt;/p&gt;

&lt;h3 id=&quot;systematise-everything&quot;&gt;Systematise Everything&lt;/h3&gt;

&lt;p&gt;Your passive income stream will, without doubt, have repeating tasks
that you’ll need to complete. In my business, I require systems for
evaluating whether new notes are good enough to sell, for placing good
notes online in a manner that’s optimised for search engines, for running online
advertising to recruit new authors every summer, for dealing with
various customer questions, and for providing accounts in a timely
manner to the government.&lt;/p&gt;

&lt;p&gt;Much of your time-savings will come from streamlining these tasks so
that they are easy for you to fulfil, or better yet, figuring out how to
cheaply outsource them to others in a way that maintains reasonable
standards of quality. The holy grail of systematising, of course, is automating these
tasks out of existence, through code or clever leveraging of your
customer’s time. For example I direct all customer service queries about
the &lt;em&gt;contents&lt;/em&gt; of the notes I sell to the author that wrote that set of
notes, thereby completely freeing me of that burden. The author is happy
to answer the question, because they know they are on the verge of a
sale.&lt;/p&gt;

&lt;p&gt;The process of systematisation begins with you identifying all your
repeating tasks and jotting them down in a bullet-pointed list. Now
create a fresh document for each of these tasks and write out roughly
how you do currently do it. To my surprise, I realised that the act of
writing out a business process is the most important part of
systematising, for when you are forced to crystalise the process into
words, you quickly see the waste and disorganisation in your current
mode of operation, and ideas for improvement flood into your mind.&lt;/p&gt;

&lt;p&gt;Once you have documented a process, not only will you have begun optimising
that process, but you will also have created training materials to hand
to outsourced assistants, or for future-you, should you forget how to do
one of your maintenance tasks after a few months vacation on your
passive income.  Last, but not least, these documents are part of the
package you must compile should you hope to ever sell your business;
money in the bank trumps a passive income.&lt;/p&gt;

&lt;h3 id=&quot;religious-keeping-of-receipts-and-business-expenses&quot;&gt;Religious Keeping of Receipts and Business Expenses&lt;/h3&gt;
&lt;p&gt;A disciplined approach to expensing hardware equipment(monitors,
laptops, etc.), web-services, home-office expenses, financial
transaction costs, educational costs(books, courses), and business-related travel dramatically cuts
down your tax bill, leaving you to enjoy a higher percentage of
take-home pay on a smaller income. It’s not about how much money you
make: it’s about how much you take home after all taxes. Soon after you
start earning, ask an accountant (or, if you don’t have the money,
an experienced businessman) to teach you how to properly and legally expense.&lt;/p&gt;

&lt;h3 id=&quot;every-customer-service-question-means-theres-a-problem-with-your-website&quot;&gt;Every Customer Service Question Means There’s a Problem with your Website&lt;/h3&gt;
&lt;p&gt;Initially, with Oxbridge Notes, I received a great many customer service
emails asking how to open the various file formats we sell, amongst other matters.
I read somewhere that you should treat customer service queries as bugs
in your onsite communication. So, to reduce the number of these customer service
queries, my software now checks the filetype of the notes and pops up
information on the download page about opening that file type on various
platforms. You want to provide the right information to your customers at exactly the
right time - not only do you save time but you also save the customer
time and stress in not knowing how to use your product.&lt;/p&gt;

&lt;h3 id=&quot;do-not-lose-the-progress-of-your-thoughts&quot;&gt;Do Not Lose the Progress of your Thoughts&lt;/h3&gt;
&lt;p&gt;Periodically, I’ve needed to do some heavy thinking and experimenting
with some aspect of my business. For example I would experiment with
using different themes in my Facebook advertising photos
- does danger sell better than sex, or does food outsell both? What is
  the maximum amount I can bid on Google Adwords for each set of notes
while still remaining satisfactorily profitable?&lt;/p&gt;

&lt;p&gt;I might devote a full day arriving at a result then
implementing it. But, because I’m not working on the business day in day
out, I’d forget the details of the results, and a year later, when I
want to run a new online advertising campaign, I can’t remember what
avenues I tried the previous year. When every minute counts, that’s a
dreadful waste of otherwise free time, and now that I’m aware of this I
do all my important business-related thinking by typing my thoughts out
into files in a folder I call “thinking aloud”. By referring to these
documents, I can pick up where my thoughts previously left off.&lt;/p&gt;

&lt;h3 id=&quot;the-killer-skill&quot;&gt;The Killer Skill&lt;/h3&gt;
&lt;p&gt;If you could learn any one skill in helping you achieve a passive income
what do you think that would be? You’re probably thinking programming.
Wrong.&lt;/p&gt;

&lt;p&gt;The killer skill for passive incomes is online marketing.  I didn’t make
money until I started using SEO and Google Adwords. With another
business I used to help run, &lt;a href=&quot;http://www.bolivianexpress.org&quot;&gt;Bolivian
Express&lt;/a&gt;, a journalism school in
Bolivia, we didn’t make a single sale until we emailed 20 university
mailing lists.&lt;/p&gt;

&lt;p&gt;No matter what your passive income source is, you need to  reach and
convince customers to buy. Sure, programming is a tremendous help in
enabling you deliver your product automatically, but there are a hundred
times as many reliable freelance programmers in the world as there are
reliable freelance marketers.&lt;/p&gt;

&lt;p&gt;Copy-writing, SEO, Adwords, Facebook advertising, email marketing and
social media marketing all come into the scope of online marketing.  A
business not using at least a few of these disciplines is like a
physical brick-store, say an IKEA, setting up on an island in the middle of the
ocean, telling no-that one they opened, yet expecting customers to throng to
their doors.&lt;/p&gt;

&lt;p&gt;A realistic way of viewing online marketing is that “you will get
exactly the number of customers you direct to your website and convince
to buy”. If you can convert a decent 1.5% of visitors to paying
customers, and each customer earn you 10 euro profit pre-marketing
costs, then you need about 6666 new visitors for every 1000 euro you
make. And you need to subtract the cost in time and effort in finding
those 6666 visitors from that 1000 you made. If you plan on making
30,000 euro, and your conversion rates and profitability are as above,
then you’ll need about 200,000 visitors per year. Since everyone else on
the internet is fighting for traffic, you’d better have a plan on how
you’re going to grab people’s attention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The number one reason passive income streams fail, I believe, is
because people don’t learn how to online market.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;switch-hats-regularly&quot;&gt;Switch Hats Regularly.&lt;/h3&gt;
&lt;p&gt;One problem you want to avoid with your passive income source is
ploughing all your time into one narrow part of your business, likely
product (be that the blog articles, the Ebook, etc.), whilst avoiding
the others. It’s too easy to get sucked up into the tasks you enjoy
most, or are best at, whilst avoiding the harder, more “work”-like tasks
that drain you energy but are necessary to ship your product and sell it
to paying customers.&lt;/p&gt;

&lt;p&gt;I much prefer programming to any other aspect of my business, and one
hack I used to force myself to rotate my attention more evenly was to
consciously match the number of programming pomodoros (or half hour work
slots if you don’t know what a pomodoro is), with marketing pomodoros.
The programming suffered in the sense that I took shortcuts and have a
ghastly list of bugs I’m aware of, but these bugs don’t really affect
the delivery of value to customers in 99.5% of cases, so this is an
engineering imperfection I’m willing to tolerate in exchange for added
sales.&lt;/p&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;I owe most of what I’ve said above to the books and blogs that
influenced my thinking, so if my approach appeals to you I recommend you
read Rework by 37 Signals and the E-Myth Revisited by Michael E. Gerber
for general business philosophy, then for online marketing and web
business, I recommend every blog post by the brilliant &lt;a href=&quot;http://www.kalzumeus.com/greatest-hits/&quot;&gt;Patrick
McKenzie&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Automating Popularity</title>
   <link href="http://www.jackkinsella.ie/2011/12/14/automating-popularity.html"/>
   <updated>2011-12-14T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2011/12/14/automating-popularity</id>
   <content type="html">&lt;p&gt;Two years ago I wrote a program that logged into my Facebook account and pretended to be me. I wanted to test the hypothesis that &lt;strong&gt;automatic tools could make someone more popular&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If I could build a script that caused more friends to get in touch with me, then my hypothesis would be proven true. If, instead, the script had no effect on my popularity or was detected as a fraud by the people in my network, then my hypothesis would be proven false.&lt;/p&gt;
&lt;p&gt;Before I carried out the experiment I studied some social psychology. According to the texts, a new acquaintance becomes a friend when they appear frequently in our lives; when they share our interests, beliefs, and background; and when we know that they return our affinity for them by liking us back.&lt;/p&gt;
&lt;p&gt;Newly informed, I modeled these concepts by creating a script that logged into my Facebook account and automatically liked the status updates, photos and comments of my friends, covering up the evidence as it went.&lt;/p&gt;
&lt;p&gt;Five days later the results came in. Listen to my talk, recorded at &lt;a href=&quot;http://www.ignitethewest.com/&quot;&gt;Ignite the West&lt;/a&gt;, in Galway, Ireland for the full story:&lt;/p&gt;
&lt;p&gt;&lt;iframe style=&quot;text-align:center;&quot; width=&quot;630&quot; height=&quot;472.5&quot; src=&quot;http://www.youtube.com/embed/PbVlUVMRGTI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/#!/meetforeal&quot;&gt;Ellen Dudley&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/#!/amonter5&quot;&gt;Adrian Avendano&lt;/a&gt;, two awesome people changing the world for the better, for organising Ignite the West.&lt;/p&gt;
&lt;p&gt;PS If you have a research project or app idea in this area, &lt;a href=&quot;/rails-developer-london.html&quot;&gt;I can make it happen&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Janki Method</title>
   <link href="http://www.jackkinsella.ie/2011/12/05/janki-method.html"/>
   <updated>2011-12-05T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2011/12/05/janki-method</id>
   <content type="html">&lt;div class=&quot;highlight&quot;&gt;
&lt;h2 class=&quot;section-title&quot;&gt;&lt;span class=&quot;caps&quot;&gt;MUST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;READ&lt;/span&gt;: Major Update To &lt;span class=&quot;caps&quot;&gt;JANKI&lt;/span&gt; Method&lt;/h2&gt;
&lt;p&gt;For nearly two years after I wrote this post I continued to use flashcards for learning programming and made a number of large refinements. I wrote about &lt;a href=&quot;http://www.oxbridgenotes.co.uk/articles/janki_method_refined&quot;&gt;Janki Method Refined&lt;/a&gt; on my company blog. Open it up in a new tab and read it next to get a complete picture.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is a guide to becoming a productive programmer quickly. In his book &lt;em&gt;Outliers&lt;/em&gt;, Malcolm Gladwell told the world it takes 10,000 hours to master something. Practice three hours a day, and you will shine in ten short years. Millions of readers felt inspired since they too could become the next Bill Gates, if only they put in the hours. As the days turned to months we discovered that 10,000 hours was a lot longer than we anticipated. Limitless potential transformed into fantasy about what might have been.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Janki Method&lt;/strong&gt; is an attempt to shorten the time needed to learn programming. It grew out of my impatient dream to build an automated web business that would free me financially, geographically and temporally. I didn&amp;#8217;t want to wait 10,000 hours. I suspect you don&amp;#8217;t either.&lt;/p&gt;
&lt;p style=&quot;float:right;&quot;&gt;&lt;img src=&quot;/images/janki/anki.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Well-intentioned learners don&amp;#8217;t always learn quickly, despite their smarts and enthusiasm. For most, eventual ability is determined by the volume of time expended. Malcolm&amp;#8217;s 10k sounds right.&lt;/p&gt;
&lt;p&gt;You’ve read that learning by doing is better than passive reading; that expressing ideas in writing forces understanding; that knowledge needs constant revision to stay fresh; that creativity comes from linking disparate ideas; and that your past mistakes are your best teachers. How many of these ideas do you apply to your learning efforts?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Janki Method&lt;/strong&gt; is built on the assumption that Malcolm’s 10k to mastery can be hastened if you take a focused approach to learning. The core of Janki Method is the use of a spaced repetition flashcard system, &lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki&lt;/a&gt;, programmed by the brilliant Damien Elmes.&lt;/p&gt;
&lt;p&gt;By following my approach, I believe that any intelligent and disciplined reader can achieve proficiency* in a given field of programming (e.g. web applications, iPhone applications) in less than 12 months.&lt;/p&gt;
&lt;p&gt;I call this the &lt;strong&gt;Janki Challenge&lt;/strong&gt;, and I invite you to take part.&lt;/p&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Problems With Learning&lt;/h2&gt;
&lt;h2&gt;Problem 1: We Forget Too Quickly&lt;/h2&gt;
&lt;p&gt;Have you ever spent a week studying for an exam, only to forget 90% of what you learned within 2 months and everything else within a year?&lt;/p&gt;
&lt;p&gt;Forgetting impedes learning knowledge-intensive skills such as programming. You need to remember various languages, solutions, libraries and gotchas if you want to build large applications. Because technical material can be so abstract and dry, you forget particularly quickly.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The first rule of &lt;strong&gt;Janki&lt;/strong&gt; boosts your memory:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Every time you learn something new create a question and answer flashcard and add this card to Anki.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Anki is a Spaced Repetition System. Most algorithms make computers efficient; Anki makes you efficient.  Using the minimal number of repetitions necessary for permanent retention, Anki drills flashcards into your long-term memory.&lt;/p&gt;
&lt;p&gt;Begin by creating a deck of flashcards called, say, computer science. A deck contains many cards, and each card consists of a question and an answer. You tag these cards with the categories that best describe their contents. For example, one card might be tagged with &amp;#8216;Rails&amp;#8217;, and another with ‘SQL&amp;#8217;. Each card can have numerous tags, something useful given how technologies frequently overlap.&lt;/p&gt;
&lt;p&gt;Over time you will build up a repository of knowledge on programming, cleanly categorized, easily searchable and regularly backed up in the cloud. Keeping a repository like is useful, but it doesn’t do anything to help you keep the knowledge inside your head. The key to this is doing your Ankis.&lt;/p&gt;
&lt;p&gt;Every morning Anki calculates which cards you risk forgetting, and then prompts you to review these cards. Doing your Ankis only takes a few minutes per day, since you only need to review a fraction of your deck on any given day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/daily-reviews.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For every card you review, Anki shows you the question side with the answer side initially blocked out. Your job is to answer the question in your head, and then reveal the answer and check whether you got it right. After you answer, four buttons appear at the bottom of the screen: “again”, “good”, “easy” and “very easy”.  Assess how easily you could recall that card and then press the appropriate button. Based on which button you press, Anki determines when next to show you that card, so answering honestly is crucial if you want the algorithm to work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/question1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Do this every day and you will not forget.&lt;/p&gt;
&lt;h2&gt;Problem 2: We Give Up Too Soon&lt;/h2&gt;
&lt;p&gt;Most people fail to learn programming for the same reason they don’t get good at playing guitar: they give up too soon. Although they practice hard for the first few weeks, they soon lose motivation, and give up before they get results.&lt;/p&gt;
&lt;p&gt;Trying to learn using a rhythm of intense activity over short periods of time followed by long pauses is problematic. Your mind needs time to absorb what it learns, so learning skills cannot be condensed into a weekend. By accepting this reality and using a learning approach that emphasizes incremental daily effort, you will be less likely to burn out and more likely to succeed.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The second rule of &lt;strong&gt;Janki&lt;/strong&gt; encourages a commitment to daily learning:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“You must use Anki every single day- including weekends and holidays &amp;#8211; and commit to doing so indefinitely.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Doing your Ankis must hold the same force of habit as brushing your teeth, and you should feel naughty if you ever miss your Ankis.&lt;/p&gt;
&lt;p&gt;Rule 2 isn’t as demanding as it might at first seem.  After a few months of practice you will be able do your Ankis in 5-8 minutes. Finding that time shouldn’t be a problem either, since Anki is available on smart-phone, meaning you can review while you walk to work, sit in the bus or have a spare minute at the office. Anki even synchronizes the state of your decks across all your devices, so changes to your desktop deck will be reflected across all of your devices.&lt;/p&gt;
&lt;h2&gt;Problem 3: We Learn Out Of Context&lt;/h2&gt;
&lt;p&gt;Learning out of context is wasteful. Reading a textbook from cover to cover may be interesting, but if those concepts are not relevant to the technical problems you currently face, then you will lack the mental context needed to assimilate that knowledge effectively. Incomplete understanding and wasted effort ensues.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The third rule of &lt;strong&gt;Janki&lt;/strong&gt; keeps you focused on what is important in the moment:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Learn in context. Pick a project, and learn only what you need to get it done.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;When I was writing this blog post I didn&amp;#8217;t know how to add images in the Textile language.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/new-card1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Step 1: I Googled it.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/new-card2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Step 2: I tried the code out by adding an image to the post.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/new-card3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Step 3: After checking that it worked, I added my new technique to my Anki Deck.&lt;/h3&gt;
&lt;h2&gt;Problem 4: We Think We Can Learn Without Doing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“I learned about sex the hard way – from a book.”&lt;br /&gt;
&lt;strong&gt;Eddie Izzard&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like sex, programming is better and more enjoyably mastered through practice. Learning without practice insulates you from reality.&lt;/p&gt;
&lt;p&gt;When you read about programming without trying out the code, you form an internal representation that is incomplete, poorly understood, and difficult to apply practically.&lt;/p&gt;
&lt;p&gt;You will fail to notice critical details. Many things may seem trivial when you first read about them in a textbook. Maybe it&amp;#8217;s the placing of quotations around a parameter to a function, or rules about where whitespace is allowed. These overlooked points can often be critical in practice, and anything less than complete understanding will cripple hour productivity. It is only by trying code out that you will notice the nuances of these rules, and really understanding the language, techniques, and commands in question.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The fourth rule of &lt;strong&gt;Janki&lt;/strong&gt; grounds knowledge in reality:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Only add a card to your deck after having tried to use the item of knowledge therein.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Say you are working on an application powered by an &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; database. To build it you will need to refer to literature on database design and &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; (a query language for selecting records from database tables). As you work on the application you will be exposed to new concepts. Try out each new nugget of knowledge before adding it to your Anki deck. If, for example, you read about how to delete a row in a database table, then you should try deleting an actual row in your database before creating the Anki card detailing that &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; query.&lt;/p&gt;
&lt;h2&gt;Problem 5: We Make More Mistakes Than We Need To&lt;/h2&gt;
&lt;p&gt;/* Our past mistakes serve as excellent memory aids.  This is a major reason why we learn by doing. That said, not all past mistakes are equally effective at teaching us lessons; there is a correlation between the emotional impact of an error and the length of time that lesson will remain in memory. */&lt;/p&gt;
&lt;p&gt;Say you make a big mistake. You accidentally push incomplete code to a live server, taking your app down for 12 hours. You panic to fix it, and as the customer complaints flood in, you feel stupid and embarrassed. This emotional punishment serves as a strong reminder of your error, and you will be more careful when pushing code to a server in future.&lt;/p&gt;
&lt;p&gt;Errors with emotional impact are, thankfully, rare, and you are unlikely to need &lt;strong&gt;Janki Method&lt;/strong&gt; to learn from these. But what about the rest of the mistakes we make, where the emotional element is diminished or even absent? We may need to make these mistakes many times before eventually learning our lesson.&lt;/p&gt;
&lt;p&gt;Mistake repetition is the number of times you need to commit a particular mistake over a lifetime before learning a permanent lesson. Because mistakes are costly, embarrassing and potentially career threatening, it is sensible to minimize their occurrence. Bosses, customers and co-workers understand a first time mistake, and all but the most unreasonable will forgive you. They will not, however, feel so forgiving the second or third time you get the same thing wrong.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The fifth rule of &lt;strong&gt;Janki&lt;/strong&gt; method minimizes mistake repetition.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Every time you make a mistake carry out a post-mortem and try to figure out the lessons in the experience. Think about what you would need to know to prevent that mistake from occurring again, and turn this insight into new flashcards.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;By applying this rule you will substitute real world mistakes with Janki reviews, and you will consequently learn from your mistakes more quickly and with less embarrassment and real world error.&lt;/p&gt;
&lt;p&gt;Ankifying your past failures doesn’t just prevent their repetition.  It also helps you understand your domain, since the act of performing a post-mortem analysis and examining the underlying causes of your error encourages deep thought.  Instead of just creating the cards you need to prevent that particular error, you might immunize yourself against that entire class of error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/bug2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Every mistake becomes a learning experience. Messing up still sucks, but you feel a small sense of victory knowing that you’ve just found a way to improve, and you will feel assured by the certainty that you will never make that mistake again.&lt;/p&gt;
&lt;h2&gt;Problem 6: We Do Not Reflect On The Big Picture&lt;/h2&gt;
&lt;p&gt;By following the initial five rules of &lt;strong&gt;Janki Method&lt;/strong&gt; you will quickly become proficient with the low level details of programming: then name and use cases of functions and commands, their expected inputs and expected outputs, solutions to common bugs, and techniques for keeping your code organised.&lt;/p&gt;
&lt;p&gt;As your experience grows you will be faced with bigger questions, such as structural decisions about your application, techniques to minimize complexity, workflows for managing simultaneous versions of your code, and the tradeoff between code performance and elegance. Answering these questions requires deep knowledge and sizable experience, and for this reason you must never miss an opportunity to grow your knowledge in these overarching issues.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The sixth rule of &lt;strong&gt;Janki&lt;/strong&gt; method encourages regular critical reflection:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“At the end of every project ask yourself what lessons you learned and what you would do differently if you were to repeat the project with the benefit of hindsight.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After a large project, such as completion of a new app, take some time to reflect. Ask yourself big questions, such as:&lt;/p&gt;
&lt;p&gt;*	Did I waste time going down any dead ends? Is there anything I could do in future to help me foresee these, and prevent them from happening again?&lt;br /&gt;
*	Did I choose the right technologies? Can I come up with a schema to help me make the right choices next time?&lt;br /&gt;
*	Did I accurately estimate the time required?&lt;br /&gt;
*	Could I have built simpler architecture? Could I have figured this out earlier?&lt;br /&gt;
*	Can I create a checklist to ease development of that kind of feature in future?&lt;/p&gt;
&lt;p&gt;Some of these questions will be difficult to answer because you have to run through alternatives in your head, thinking about the benefits and tradeoffs of each. This effort is worthwhile since sensible architectural decisions prevent wasted effort. Without active reflection you will be less likely to notice these project level patterns, and so your wisdom will grow more slowly than it otherwise would.&lt;/p&gt;
&lt;h2&gt;Problem 7: We Let Our Knowledge Representations Grow Messy&lt;/h2&gt;
&lt;p&gt;Like a front lawn left idle, your Anki decks can grow ugly. Perhaps one of the programming languages you previously learned has changed dramatically in version 2.0 and now a percentage of your cards are invalid. Perhaps some of your cards are no longer worthy of keeping in periodic review– their usefulness doesn’t justify the cumulative revision time needed.&lt;/p&gt;
&lt;p&gt;As you learn, you will discover simpler ways to understand concepts; without updating your cards to reflect these improved paradigms you risk losing these insights forever. Often a group of cards can be replaced with a single card on a higher order concept.&lt;/p&gt;
&lt;p&gt;Sometimes you will see links between cards in your deck. If you note the connection between these cards you create multiple neural paths to the same item of knowledge. If one path were to fail, you could still arrive at and trigger that knowledge from another route. The ability of mind maps to help you remember works using a similar idea. By looking for and noting these connections in your decks this you add a layer of redundancy to your knowledge representation that further insures against future forgetting,&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The seventh rule of &lt;strong&gt;Janki&lt;/strong&gt; keeps your decks in shape.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Delete or modify any incorrect, outdated, difficult to remember, incomplete or unnecessary cards. Update existing cards as improved understanding dawns.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;The following shows a poor understanding of Git, later updated with a more nuanced understanding.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/poor-understanding.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/janki/better-understanding.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Problem 8: We Do Not Reference Primary Sources&lt;/h2&gt;
&lt;p&gt;Graphic designers, artists, architects and other creatives keep scrapbooks of designs they like. Later, when working on a project, they draw inspiration from these same scrapbooks.&lt;/p&gt;
&lt;p&gt;As a programmer your primary source of inspiration will be other people’s code. Download open source projects (e.g. on &lt;a href=&quot;http:www.github.com&quot;&gt;Github&lt;/a&gt;) and read through the code. Look up parts you don’t understand, and create new cards as necessary. Get a pen and paper, and sketch out the paths through the program. What are the inputs, and what are the expected outputs? What happens to the data as it moves through the program? Why was it designed in this way? What techniques were used?&lt;/p&gt;
&lt;p&gt;By reading code you will be exposed to various styles and of programming and solutions to programming problems. You will see things you like, and lots of things you don’t like. With time you will find your own style.&lt;/p&gt;
&lt;div class=&quot;janki-rule&quot;&gt;
&lt;p&gt;&lt;em&gt;The eighth rule of &lt;strong&gt;Janki&lt;/strong&gt; encourages you to use your readings of other people’s code as a source of learning:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Read code regularly. If you come across something interesting – be that an algorithm, a hack, or an architectural decision &amp;#8211; create a card detailing the technique and showing the code.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Janki Method: More Than Just A Memory Aid&lt;/h2&gt;
&lt;p&gt;My initial goal with using Anki to learn was to stop myself from forgetting, and Anki delivered on this promise. What I wasn&amp;#8217;t expecting was the secondary advantages that emerged through long term daily use.&lt;/p&gt;
&lt;h2&gt;Advantage 1: Program Faster&lt;/h2&gt;
&lt;p&gt;Knowing thousands of commands saves time otherwise spent looking up reference materials. You instantly recall previous solutions when faced with a problem, and dozen of possibilities spring to mind when architecting a system. You will read other people&amp;#8217;s code rapidly, confident in your understanding. The closest analogy is fluency in a natural language. You will speak code.&lt;/p&gt;
&lt;p&gt;Most of the time I spend programming is spent debugging, that is fixing errors in your code or in the code of other programmers. This is where a deep knowledge of the platform will speed you up the most. Debugging consists chiefly of gathering information. What was the system supposed to do? What data was in the system when we saw the error? What could have went wrong? Frequently a single delinquent line of code can be the cause of a bug that takes down an entire site. The hard part is figuring out which of the thousands of lines of logic caused the issue.&lt;/p&gt;
&lt;p&gt;Let’s take an example. Say your program uses 100 functions and 70 of these are built into the language. That means that there were 30 custom defined functions. If you know with confidence the inputs and outputs of the 70 built-in functions, then debugging is simplified, since you will only need to figure out how the remaining 30 custom functions work.  Considering that custom functions are themselves defined in terms of built-ins, this task should not take too long either. Total certainty about the syntax, inputs, outputs, and uses of the built-in functions lets you quickly isolate unknowns and bring the bug to surface.&lt;/p&gt;
&lt;p&gt;Brainstorming ability is improved through &lt;strong&gt;Janki Method.&lt;/strong&gt; Deep knowledge in mind means you can try out alternatives on paper rapidly and so increase your chances of coming across a cheeky non-obvious solution to your problem.&lt;/p&gt;
&lt;p&gt;You might argue that you will get the same speed boost with knowledge earned through experience. That is true, but this argument misses the point. Janki enables you to gain that same knowledge faster, and retain it for longer. If you’ve ever forgotten how to do something after leaving it aside for a few months, then Anki is for you.&lt;/p&gt;
&lt;h2&gt;Advantage 2: Chunking&lt;/h2&gt;
&lt;p&gt;Skill in a technical field is the product of your intelligence and your knowledge.  Weakness in one can be overshadowed by strength in another. Bright yet inexperienced can perform on par with dull yet experienced.&lt;/p&gt;
&lt;p&gt;This point is best illustrated by example. Let’s multiply 130 by 30 using two approaches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach 1&lt;/strong&gt;: You know that multiplication is repeated addition, and so the problem becomes 130  + 130 + 130&amp;#8230; and so on. Applying the rules of addition you arrive at 3900 &amp;#8211; eventually. Let’s call intelligence your ability to carry out these individual calculations quickly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach 2&lt;/strong&gt;: Perhaps you remember from your multiplication tables in school that 13 X 3 is 39. You might also remember that the commutative and associative properties of multiplication let you simplify 130 X 30 to 10 X 13 X 3 X 10 and finally to 39 X 100, which can be calculated trivially as 3900. Your intelligence, or speed of addition here, is irrelevant since domain knowledge let you simplify the problem dramatically.&lt;/p&gt;
&lt;p&gt;In approach 1, the problem was labour intensive because you did not use knowledge to ease your calculation. This wasn’t the case in approach 2, where you reasoned using higher order chunks of knowledge, so solving an otherwise lengthy problem with ease. The application of remembered chunks of knowledge to problems at hand is called &lt;strong&gt;chunking&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you remember the answer to a question, you have no need to deduce it in the moment, and so your mind is free to deduce more abstract concepts. This is the value of chunking.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Janki Method&lt;/strong&gt; encourages chunking. This was an unexpected benefit, yet ultimately the most useful to me. After six months of daily application you will reason about programming concepts using mental shortcuts equivalent to those used to simplify the multiplication problem in approach 2. Maximize chunking by adding increasingly abstract rules and concepts to your decks, and making an effort to draw on these ideas when solving problems.&lt;/p&gt;
&lt;h2&gt;Advantage 3:  Searchable Archive of All Your Programming Knowledge&lt;/h2&gt;
&lt;p&gt;Has your computer ever spat out an error message and, although you remember seeing it before, you don&amp;#8217;t remember how to fix it? Before I started &lt;strong&gt;Janki Method&lt;/strong&gt; this would happened to me lots.&lt;/p&gt;
&lt;p&gt;The first time I saw the issue I would spend half a day solving the problem.  Six months later the problem would happen again, perhaps in a slightly different form. Even though I was vaguely aware of having seen it before, I&amp;#8217;d forgotten how to fix it.&lt;/p&gt;
&lt;p&gt;This felt wasteful and I didn&amp;#8217;t like it. I don&amp;#8217;t like having to solve the same problem twice. &lt;strong&gt;Janki Method&lt;/strong&gt; helps prevent this from happening..&lt;/p&gt;
&lt;p&gt;Anki has a search feature that finds all matching cards in your deck. You can even filter by date or tag. For example you might search through cards containing the word &amp;#8220;ssh&amp;#8221; created more than 6 months ago and tagged with ‘deployment’.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/janki/search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After solving a bug you should always add some cards to your deck containing the knowledge needed to prevent that bug from occurring again. Better yet, abstract one level and add cards containing the knowledge needed to prevent that class of bugs. Now, whenever you are faced with a bug the second time, all you need to do is search your archives.&lt;/p&gt;
&lt;h2&gt;Advantage 4:  Not Reinventing The Wheel&lt;/h2&gt;
&lt;p&gt;Modern programming languages have many algorithms built in, or easily included as parts of a readily available core library. This is especially true of high-level languages such as Ruby, and Python. You want to sort an array? Array#sort does the trick.&lt;/p&gt;
&lt;p&gt;If you didn’t know the sort algorithm was built into the language, then you might write your own in its place. When you do so you risk making mistakes and missing out on low level optimizations. Furthermore you alienating future users of your code, who might think there was a reason other than ignorance for why you wrote a custom sort algorithm instead of using the one built into the language.&lt;/p&gt;
&lt;p&gt;By filling your deck with built-ins from your chosen languages you will be less likely to accidentally implement existing features in a confusing, half-assed, and bug-prone way.&lt;/p&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Appendix&lt;/h2&gt;
&lt;h2&gt;Should I Download Other People&amp;#8217;s Decks?&lt;/h2&gt;
&lt;p&gt;Anki has an online searchable database of other people&amp;#8217;s shared decks. Although there are not many decks for computer science, you might be able to find some and piece these together as the basis for your deck.&lt;/p&gt;
&lt;p&gt;Be careful with this. You might add facts to your deck that are of no use to you, and you may end up reviewing facts that you do not fully understand, thus building a poor foundation for future knowledge.&lt;/p&gt;
&lt;p&gt;Ideally you should build your own decks from scratch, drawing from your programming experiences; your readings of other people’s code, textbooks; viewing educational screen casts; and reviewing past mistakes and previous projects. By creating your decks in this way, you keep them filled with well-understood real world contextual knowledge, phrased and categorized in a way that makes sense to you.&lt;/p&gt;
&lt;p&gt;If you are going to use other people&amp;#8217;s decks make sure you understand every card you learn. Be sure to try the code out when you first see it; this takes more discipline that you might have. Make sure you trust the author of the deck &amp;#8211; you don&amp;#8217;t want to learn incorrect or dated knowledge, and sadly most of the decks freely available are abysmal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I have a deck with close to 6000 cards which focuses on the Ruby on Rails technology stack&lt;/strong&gt;, including cards on Ruby and Rails 3.1, the &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; protocol, the Unix command line, Git, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, JavaScript, &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;, Rspec, Capybara, &lt;span class=&quot;caps&quot;&gt;TDD&lt;/span&gt;, Coffeescript, jQuery, coffeescript, sass, deployment, design patterns, regular expressions, &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt;, refactoring, and algorithms. The knowledge is cleanly tagged, nicely formatted and up to date. It&amp;#8217;s everything I&amp;#8217;ve needed to build, manage and deploy a variety of web apps. &lt;a href=&quot;http://www.oxbridgenotes.co.uk/other/web_development_flashcards&quot;&gt;Download my web development flashcards&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What Knowledge Belongs in my Decks and What Doesn’t?&lt;/h2&gt;
&lt;p&gt;When I first began &lt;strong&gt;Janki Method&lt;/strong&gt; I was over-zealous in my addition of facts to my decks. In particular, I added stacks of cards for third party code libraries. This turned out to be wasteful,  seeing as I rarely used this knowledge. Technology moves rapidly, and today’s in-vogue libraries become tomorrow’s baggage from the past. I ended up deleting many of these cards after having wastefully committed them to long-term memory.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not always easy to distinguish between knowledge worth keeping long term and knowledge only needed short term To help me with the decision I came up with this schema:&lt;/p&gt;
&lt;p&gt;Only enter a card into your decks if one of the following conditions is met:&lt;/p&gt;
&lt;p&gt;a) The fact contains general wisdom about computer science (refactoring, regular expressions, object orientated programming, memory issues and so on).&lt;/p&gt;
&lt;p&gt;b) The fact relates to a major technology that has been around for a long time and is probably here to stay (Linux, Ruby, Javascript, &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;, git, &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;c) The fact, while part of a library that is likely to change, is something I use everyday and something I foresee using for some time. Bonus points if the technology is in high demand, since this equates to higher consulting rates. (Rails, jQuery).&lt;/p&gt;
&lt;h2&gt;What are the main keyboard shortcuts I need to know?&lt;/h2&gt;
&lt;p&gt;You will be reviewing your cards everyday so it helps to small time savings here quickly compound. Keyboard shortcuts are crucial.&lt;/p&gt;
&lt;p&gt;Press &lt;strong&gt;Enter&lt;/strong&gt; to reveal answers and then evaluate your response with the keys &lt;strong&gt;0&lt;/strong&gt;,&lt;strong&gt;1&lt;/strong&gt;,&lt;strong&gt;2&lt;/strong&gt; or &lt;strong&gt;3&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command + Backspace&lt;/strong&gt; deletes a card. Use this for troublesome/incorrect/out of date cards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command + E&lt;/strong&gt; lets you edit a card and then &lt;strong&gt;Tab&lt;/strong&gt; moves the cursor between the question and answer panes.&lt;/p&gt;
&lt;h2 class=&quot;section-title&quot;&gt;The Janki challenge&lt;/h2&gt;
&lt;p&gt;Want to learn to program and start building powerful apps? Then take the Janki challenge. Download Anki (link below), pick a programming project, and publicly announce to your friends that you’ve committed to learn to program.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why public commitment? Public commitment creates social pressure that pushes you to honour your promises to the world. This pressure will see you through the difficult first stages where you will be most tempted to give up.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I believe that if you follow the system exactly as described above, you will learn to program significantly more quickly than you would using any other approach other than one-to-one tutoring.&lt;/p&gt;
&lt;h2 class=&quot;section-title&quot;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.oxbridgenotes.co.uk/other/web_development_flashcards&quot;&gt;5500 web development flashcards, made by me&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki &amp;#8211; Available for Free Download&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.supermemo.com/articles/20rules.htm&quot;&gt;20 Rules for Formulating Knowledge in Learning&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak?currentPage=all&quot;&gt;Want to Remember Everything You&amp;#8217;ll Ever Learn? Surrender to This Algorithm&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.supermemo.com/articles/genius.htm&quot;&gt;Genius and Creativity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;captioned-image&quot;&gt;
&lt;p&gt;&lt;img src=&#39;/images/janki/jack-kinsella.jpg&#39;&gt;&lt;br /&gt;
&lt;p&gt;My Jankiest Face&lt;/p&gt;&lt;/p&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Why Bother With Cucumber Testing?</title>
   <link href="http://www.jackkinsella.ie/2011/09/26/why-bother-with-cucumber-testing.html"/>
   <updated>2011-09-26T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2011/09/26/why-bother-with-cucumber-testing</id>
   <content type="html">&lt;p&gt;I recently heard an account of a web development project from both the point of view of the consultancy doing the work and the client. A member of the consultancy told me how they educated a technologically backward client about agile processes. Although this might be tedious for the client initially, with time the client would appreciate their wisdom. Glowing business referrals would follow forever more.&lt;/p&gt;
&lt;p&gt;A few days later I bumped into the client:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;[X] were a nightmare to deal with. They wouldn&amp;#8217;t let me have what I wanted, and they wasted my time arguing over petty details. Although they did the job well, they had no business sense. I can’t see them lasting much longer.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The consultancy screwed up: Amongst other things, they pushed the client to use a process that wasn&amp;#8217;t appropriate. &lt;strong&gt;In particular, they gave the client Cucumber feature files to read and approve, even though the client didn&amp;#8217;t give a damn.&lt;/strong&gt; In the client’s words “all we wanted was a website”. (It was actually a web app but most non-technical people don’t draw a distinction). The client just wanted it “to work”.&lt;/p&gt;
&lt;h2&gt;Imagine You Are The Client&lt;/h2&gt;
&lt;p&gt;Step out of your programmer skin for a moment and pretend you are a busy business owner while you read the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;gherkin&quot;&gt;&lt;span class=&quot;k&quot;&gt;Feature:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; In order to let customers organise their information across themes on various pages.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;         As an administrator of a micro-site&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;         I want to be able to add subpages&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; Adding a subpage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  Given &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I am logged in&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  Given[sic] a micro-site with a home page&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I press &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Add subpage&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;And &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I fill in &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot; with &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Gallery&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;And &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I press &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I should see a document called &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Gallery&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scenario, but not feature description taken from &lt;a href=&quot;http://elabs.se/blog/15-you-re-cuking-it-wrong&quot;&gt;You&amp;#8217;re Cuking It Wrong&lt;/a&gt;. (Note that Jonas doesn&amp;#8217;t give his clients Cukes to read.)&lt;/p&gt;
&lt;p&gt;According to Jonas Nicklas at E-labs, the above is an example of acceptable Cucumber style, written in the language of stake-holders. As a past consumer of development services, I have to disagree with him. The appropriate level of detail here is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;gherkin&quot;&gt;&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;I &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;can add subpages to my micro-site.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Any more is superfluous. If it takes you ten lines to communicate the idea of adding subpages, then you&amp;#8217;ve wasted my time. I’m not alone in thinking this. &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt; expert &lt;a href=&quot;http://sirenian.livejournal.com/71439.html&quot;&gt;Elizabeth Keogh&lt;/a&gt; tells us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;If your scenario starts with &amp;#8216;When the user enters ‘Smurf’ into ‘Search’ text box…&amp;#8217; then that’s far too low-level. However, even “When the user adds ‘Smurf’ to his basket, then goes to the checkout, then pays for the goods” is also too low-level. You’re looking for something like, &amp;#8216;When the user buys a Smurf.&amp;#8217;&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you take this view, then the overwhelming majority of the Rails community have been using Cucumber incorrectly. Despite believing otherwise, most programmers never wrote a single acceptance test; instead they wrote integration tests using the Cucumber syntax.&lt;/p&gt;
&lt;p&gt;This is a damning claim and so I offer evidence. In my experiences both as a Ruby contractor and as an employer of programmers, most feature files I’ve seen are composed of the web steps included with Cucumber by default. These web steps are integration tests in disguise. Cucumber steps such as &amp;#8220;When I fill in &amp;#8216;search&amp;#8217; with &amp;#8216;Smurf&amp;#8217;&amp;#8221; are rampant in the Rails community, despite their position at the most fault-worthy level in Elizabeth Keogh’s schema.&lt;/p&gt;
&lt;p&gt;My own anecotal experience isn&amp;#8217;t enough so I did some research. I browsed through the feature files in six major open source Rails projects, including Spree, Radiant and Diaspora. All bar one, Tracks, wrote their feature files near exclusively in web steps. In effect they wrote integration tests using the Cucumber syntax.&lt;/p&gt;
&lt;h2&gt;The Make-Believe Analyst&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s consider the above feature file again, imagining that you are the client. You run a business and so are conscious of costs. You might reasonably ask what’s with all this ‘in order to’ stuff? Why is this developer playing make-believe analyst? Doesn’t he know that you&amp;#8217;ve already communicated that you&amp;#8217;ve determined the business value when you approved development? And, most importantly of all, is the developer charging you for this work?&lt;/p&gt;
&lt;p&gt;The Cucumber way says you sit with your client and determine, feature by feature, the business value that each piece of functionality serves. That&amp;#8217;s cool, but it isn’t a realistic job description for many programmers.  High level analysts and consultants might sometimes do this, but the likelihood is that you aren’t acting as a high level consultant or analyst on your current project, and so Cucumber is inappropriate. Not only this, but using Cucumber is downright wasteful considering its cost.&lt;/p&gt;
&lt;h2&gt;The Cost of Using Cucumber&lt;/h2&gt;
&lt;h3&gt;1. Cucumber breaks text editors&lt;/h3&gt;
&lt;p&gt;Text editors, like &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;, multiply productivity. Auto-completion eases the use and reuse of descriptive method names. Compilation checks prior to saving catch syntax errors before they cause harm. The editor’s ability to understand the signature of a method makes tasks such as finding method definitions and uses simple.&lt;/p&gt;
&lt;p&gt;Cucumber&amp;#8217;s steps are method names written using the Gherkin syntax, and this unique syntax breaks text editors. Steps contain white space, include their parameters at non-standard locations (When “john@gmail.com” has “4” unsent messages), and use regular expressions for pattern dispatch (&amp;#8220;and|or&amp;#8221;). Text editors are not adapted to deal with this, and so auto-complete, search and many other features break, damaging productivity.&lt;/p&gt;
&lt;h3&gt;2. Cucumber Requires Maintenance of a Second Testing Environment&lt;/h3&gt;
&lt;p&gt;Anyone thinking of using Cucumber for acceptance tests most likely already unit tests using something like Test::Unit or Rspec. When a project’s complexity grows, we organise test suites by placing shared test code into helper methods and eventually into modules shared across many test files. We also categorise tests using tagging systems, use tools like Spork to speed up test startup time, and use watchr or autotest to run tests automatically. We add gems to the test environment to make use of advanced helper methods that freeze time, open up emails, or fake web requests.&lt;/p&gt;
&lt;p&gt;Cucumber doesn&amp;#8217;t like to share. It does not pick up existing test configurations or helper methods. Our taxonomy of tags carries no weight and so we must mirror our existing setup in our new Cucumber world. If we are undisciplined about refactoring we might duplicate code, denormalizing our code base. Even if we are disciplined, we will, at the very least, increase the complexity of our project and thus the scope for error. The parallel worlds of Cucumber and our unit tests then need to be maintained, and the creators of testing gems must now care for two masters. Cucumber takes another toll on the community’s productivity.&lt;/p&gt;
&lt;h3&gt;3. Cucumber&amp;#8217;s Routing Causes Cognitive Strain&lt;/h3&gt;
&lt;p&gt;Cognitive strain refers to the total weight of facts and rules we must hold in our minds to be productive using a technology. Rails imposes a high cognitive strain. When I began using it I faced a period of difficulty as I untangled the labyrinthine naming patterns of routes, the pluralisation conventions, and the subtle distinctions between various ActiveRecord::Base persistence methods. I’m not saying that cognitive strain is a bad thing; it is often a necessity in powerful tools. I am saying that cognitive strain must be justified.&lt;/p&gt;
&lt;p&gt;In Cucumber steps, the mention of a specific web page, for example &amp;#8220;the login page&amp;#8221;, requires us to map this stake-holder description to a url helper method our app understands.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#features/support/paths.rb&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/the login page/&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;login_path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Rails routing system is complex: in &lt;em&gt;The Rails Way&lt;/em&gt; Obie Fernandez suggested that you could squeeze everyone who understands it into one taxi. Cucumber adds an abstraction layer over this already complex system, and this leads to slower development and increased error on larger projects.&lt;/p&gt;
&lt;p&gt;A problem I faced when adding new features was that I would unintentionally describe paths using differing natural language descriptions. Perhaps I&amp;#8217;d call &amp;#8220;the login page&amp;#8221; the &amp;#8220;the sign in page&amp;#8221; one day, and &amp;#8220;the log in page&amp;#8221; another. When I did this Cucumber complained that it could not find the permuted path name, and so I had to look inside the paths.rb file to remind myself of my previous phrasing. That&amp;#8217;s a lot of remembering, and a lot of room for error and slowdown.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve experimented with removing the paths.rb file and writing logic that automatically determines the route based on humanized url helpers. This leads to unacceptable step definitions such as &amp;#8220;And then I am on the new user session page&amp;#8221;. This is far too close to implementation language to be understandable to the average stakeholder, and so this option must be avoided if we&amp;#8217;d like to use Cucumber in the way it was intended.&lt;/p&gt;
&lt;h3&gt;4. Cucumber&amp;#8217;s Organisation Defaults Are Impractical&lt;/h3&gt;
&lt;p&gt;My favorite feature of Rails is one of its simplest: everything has a place. Mailers go in one folder, models go in another and configurations go somewhere else. Presuming that a project sticks to convention, you can find the source code for any function effortlessly. This brings enormous productivity advantages, especially on projects you inherit from other programmers.&lt;/p&gt;
&lt;p&gt;Cucumber asks you to create step definitions for any custom steps you use. The convention is to keep these steps in a file {feature_name}_steps.rb. This convention makes sense on tiny projects, and step definitions are easily found. Problems start once you need to reuse step definitions across many features and you want to keep code &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt;. Two things typically happen:&lt;/p&gt;
&lt;p&gt;1)	If you’ve got a good memory you find the old step definition and use that method again in your new feature. This can be a terrible move. The shared helper’s presence in promote_post_feature_steps.rb file suggests exclusive connection with that feature. If you later remove the promote_posts feature file you will probably remove its step definition file too, having forgotten that it contained global step definitions. Ideally you should have extracted these shared step definitions to a global step definition file, but realistically this doesn’t always happen. We&amp;#8217;ve all got deadlines.&lt;/p&gt;
&lt;p&gt;2)	If you don’t have a good memory, or it has been a long time since you last visited the project, you might have forgotten that you previously wrote a step definition for promoting a post. Alternatively you might never have created a step definition but another programmer had done so without you knowing. You write a fresh step definition in taxon_steps.rb, but now your code is no longer &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt;. At a later date you might be refactoring the promotion logic and make the changes in promote_post_feature_steps.rb, and then assume you had finished refactoring. The taxon_steps.rb now contains an out of date version of the logic for this step, and this will lead to confusing test failures, since you have no good reason to suspect an issue with the recently refactored promotion logic. Cucumber’s default way of organising features sets you up for these difficulties, and it takes lots of discipline to avoid them.&lt;/p&gt;
&lt;h3&gt;5. Increased Wordiness&lt;/h3&gt;
&lt;p&gt;Do you consider one of Ruby’s advantages its brevity compared to other languages such as Java? Do you prefer Sass, Coffeescript and Slim to &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, Javascript and &lt;span class=&quot;caps&quot;&gt;ERB&lt;/span&gt; for the same reason? Then why do you persist in using Cucumber?&lt;/p&gt;
&lt;p&gt;Method names in Cucumber need twice as many characters as their plainer Capybara equivalents. Compare:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;gherkin&quot;&gt;&lt;span class=&quot;k&quot;&gt;Given &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I am on the home page &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#27 characters&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_url&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#14 characters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Increased wordiness reduces expressiveness and power, and introduces error since more characters means more places a typo can appear.&lt;/p&gt;
&lt;h4&gt;6. Cucumber Syntactically Discourages Code Reuse&lt;/h4&gt;
&lt;p&gt;Cucumber users tend to write their step definition in terms of other step definitions.  The library creators have implicitly encouraged this by creating simple means for doing so. Here’s an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;gherkin&quot;&gt;&lt;span class=&quot;k&quot;&gt;When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/^I toggle the full sample on the “(^”.*)” product/ do |product_name|&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  steps %Q{&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I am on the last upload page for “&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#{product_name}”&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;And &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I follow &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;full_samples&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;And &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I press &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;toggle_full_sample&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I refresh the page&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is an abomination, albeit one that is understandable. A developer wants their code to remain &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt; but they don&amp;#8217;t want the added hassle of encapsulating the step definitions in Ruby methods. So, they reuse their step definitions.&lt;/p&gt;
&lt;p&gt;But consider this: When you are inside a step definition you are exclusively in the domain of the programmer. The stake-holder never reads this. With this in mind, wouldn’t it be advantageous to use the brevity, precision, composability, editor support and abstraction tools of the full Ruby programming language? Using Ruby, you will be able to do things like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^I toggle the full sample on the “(^”.*)” product/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;feature_latest_upload&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;refresh_page&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should_see&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;features&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reuse of step definitions within other step definitions, and the composition of higher level steps using the web steps included with Cucumber, are, in my opinion, the main reasons why so many companies attempt integration tests only to abandon the effort within a few months.  The tests become too difficult to maintain and get out of sync. The solution to this pain point isn’t simple, but the most sensible course involves use of more powerful tools of abstraction – such as the full Ruby programming language over awkward step definitions.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Cucumber has its uses, principally as a high level analysis tool on large, polyglot projects. That said, few programmers work in this kind of position, and acceptance tests beyond a list of the method names of regular integration tests seems wasteful. Cucumber, as used by the majority of Rails programmers, is no more than a clumsy wrapper over basic integration tests. The differences are not just cosmetic: Cucumber&amp;#8217;s syntax is costly, both to the programmer and to the client, whose time and money are wasted. Furthermore, the use of Cucumber in open source software intended for technical users and its use in solopreneur efforts is downright ridiculous. Nevertheless, programmers continue to use Cucumber inappropriately.&lt;/p&gt;
&lt;p&gt;Why not admit to yourself that you don&amp;#8217;t do acceptance testing and that you do not need it in your projects? Swap Cucumber for pure integration tests using Capybara, and you&amp;#8217;ll be surprised by how much more productive you can be.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Textmate to VIM</title>
   <link href="http://www.jackkinsella.ie/2011/09/05/textmate-to-vim.html"/>
   <updated>2011-09-05T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2011/09/05/textmate-to-vim</id>
   <content type="html">&lt;p&gt;When I switched from Textmate to &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; I felt like a tourist lost on a Japanese subway without a guide, translator or hope. I was unable to find in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; the features I&amp;#8217;d come to love and rely on in Textmate. I yearned for ⌘ + T to summon my models, a project drawer to manage my files, and snippets to save my fingers.&lt;/p&gt;
&lt;p&gt;Instead of accommodating my needs, &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; sat firm and unresponsive, save for a judgemental beep. Even though I was supposed to go cold turkey on Textmate, I met her by night for a guilty after-hours edit.&lt;/p&gt;
&lt;p&gt;With time I learned to mimic nearly every Textmate feature in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;, and then some. This guide isn&amp;#8217;t about the powerful functionality &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; has over-and-above Textmate; you&amp;#8217;ll figure this out with time. This guide is to help you do in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; what you already can using Textmate, only with considerably less pain than I underwent.&lt;/p&gt;
&lt;p&gt;This guide makes a few assumptions:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;You are using a Mac.&lt;/li&gt;
	&lt;li&gt;You&amp;#8217;ve installed Mac &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;. The easiest way is using Home Brew. &lt;br /&gt;
&lt;code&gt;brew install macvim&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;You&amp;#8217;ve installed &lt;a href=&quot;https://github.com/carlhuda/janus&quot;&gt;Janus&lt;/a&gt;, the community maintained &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; distro with plugins and configurations useful to Rails programmers accustomed to Textmate.&lt;/li&gt;
	&lt;li&gt;You&amp;#8217;ve created a ~/.vimrc.local file (for core &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; configurations), ~/.gvimrc.local (for configuring the graphics in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;) and ~/.janus.rake (for adding or removing plugins in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;). See my &lt;a href=&quot;https://github.com/jackkinsella/dotfiles/tree/&quot;&gt;dotfiles&lt;/a&gt; for some commented examples. Better yet, use them as sensible defaults.&lt;/li&gt;
	&lt;li&gt;You&amp;#8217;ve already learned the basics of &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;. If you haven&amp;#8217;t type vimtutor in your terminal for a 20 minute tutorial. Advanced training can be found be referring to the &lt;a href=&quot;#vim_training_resources&quot;&gt;vim training resources&lt;/a&gt; below.&lt;/li&gt;
	&lt;li&gt;You were a power user of Textmate.&lt;/li&gt;
	&lt;li&gt;You are a Rails programmer switching from Textmate to &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;. About 30% of this guide is Rails specific.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;This guide may only be reproduced with the express permission of Jack Kinsella &amp;#8211; &lt;a href=&quot;/rails-developer-london.html&quot;&gt;Rails Developer, London&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Some Preliminary Notes (Do Not Skip)&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Command &lt;/td&gt;
		&lt;td&gt; Shortcut in Textmate &lt;/td&gt;
		&lt;td&gt; Shortcut in Vim&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;ul&gt;
	&lt;li&gt;In general the keyboard shortcuts in Textmate require you to press the keys at the same time. Below, this is symbolised by a +. VIM&amp;#8217;s shortcuts, by contrast, typically require you to press the keys in quick succession, rather than at the same time. If you see &amp;#8216;dd&amp;#8217; this means type d twice.&lt;/li&gt;
	&lt;li&gt;Whilst commands in Textmate are &lt;em&gt;case insensitive&lt;/em&gt;, or rather the shift key is specified in the commands below, the commands in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; are &lt;em&gt;case sensitive&lt;/em&gt;. If I tell you to type Y then typing y will not suffice.&lt;/li&gt;
	&lt;li&gt;Unless otherwise specified, all the &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; commands assume you are in normal mode, the mode where you cannot type text into the file.&lt;/li&gt;
	&lt;li&gt;If I instruct you to add something to your vimrc.local or gvimrc.local files you will need to type :source ~/.vimrc.local or :source .gvimrc.local to reload &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; with your changes.&lt;/li&gt;
	&lt;li&gt;If I instruct you to add code to your .janus.rake file, you must cd into your ~/.vim directory and run rake for these changes to be installed.&lt;/li&gt;
	&lt;li&gt;Regular expressions in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; differ from those in Textmate, and these are outside the scope of this guide. 90% of these differences will be alleviated if you add this to your .vimrc.local:&lt;br /&gt;
&lt;code&gt;nnoremap / /\v&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;vnoremap / /\v&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;This automaticaly prefixes your search commands with \v (Technically, the commands map the key /, symbolising search, to /\v, meaning search with &amp;#8216;very magic&amp;#8217; regex syntax. There are two entries since the remapping happens in two modes.). &amp;#8216;Very magic&amp;#8217; regex syntax means that all &lt;span class=&quot;caps&quot;&gt;ASCII&lt;/span&gt; characters except &amp;#8216;0&amp;#8217;-&amp;#8216;9&amp;#8217;, &amp;#8216;a&amp;#8217;-&amp;#8216;z&amp;#8217;, &amp;#8216;A&amp;#8217;-&amp;#8216;Z&amp;#8217; and &amp;#8216;_&amp;#8217; have a special meaning.  Without this you would need to escape many characters which are standard regex syntax in, say, Ruby.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Opening, Closing and Creating Files&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Open a file&lt;/td&gt;
		&lt;td&gt; ⌘ + 0 &lt;/td&gt;
		&lt;td&gt; :e &lt;span class=&quot;caps&quot;&gt;FILENAME&lt;/span&gt; &lt;br /&gt;
&lt;em&gt;Use Tab completion after typing the first few letters&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;You may need to save your current file first&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Create new file&lt;/td&gt;
		&lt;td&gt; File &amp;gt; new &lt;/td&gt;
		&lt;td&gt; ⌘ + T (new tab) &lt;br /&gt;
&lt;em&gt;You will be in a new file on a separate tab. Type something and then save with:&lt;/em&gt;&lt;br /&gt;
:w newfilename &lt;br /&gt;
:e new_filename&lt;br /&gt;
&lt;em&gt;Opens a new file in the current window&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Quit&lt;/td&gt;
		&lt;td&gt; ⌘ + q &lt;/td&gt;
		&lt;td&gt; :q &lt;br /&gt;
&lt;em&gt;This throws an error if you have not saved. use :wq to save and quit or :q! to quit without saving&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Open project from command line&lt;/td&gt;
		&lt;td&gt; [cd to folder] mate . &lt;/td&gt;
		&lt;td&gt; [cd to folder] mvim . &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Saving Files&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Save file&lt;/td&gt;
		&lt;td&gt; ⌘ + S &lt;/td&gt;
		&lt;td&gt; :w &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Save file as&lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + S &lt;/td&gt;
		&lt;td&gt; :w &lt;span class=&quot;caps&quot;&gt;NEWFILENAME&lt;/span&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Undo / Redo&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Undo&lt;/td&gt;
		&lt;td&gt;⌘ + Z &lt;/td&gt;
		&lt;td&gt; u &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Redo&lt;/td&gt;
		&lt;td&gt; ⇧ + ⌘ + Z &lt;/td&gt;
		&lt;td&gt; ⌃ + R &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;File Renaming&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Rename a file&lt;/td&gt;
		&lt;td&gt; Focus on the project drawer and select a file. Press spacebar. Type a new name. &lt;/td&gt;
		&lt;td&gt; Start by &lt;a href=&quot;#nerd_tree&quot;&gt;focusing on the NERDTree&lt;/a&gt;. Select the file you wish to rename (however you want: e.g. with a search or plain old jklh). Type &amp;#8216;m&amp;#8217; to bring up a menu. Type &amp;#8216;m&amp;#8217; again to chose to modify the file name. Type the new name of file and press enter. &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&quot;nerd_tree&quot;&gt;Project Drawer/ NERDTree&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Focus on project drawer&lt;/td&gt;
		&lt;td&gt; ⌃ + &lt;Tab&gt; &lt;/td&gt;
		&lt;td&gt; &lt;a href=&quot;#switch_tabs&quot;&gt;Switch tabs until selected&lt;/a&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Close/Open project drawer&lt;/td&gt;
		&lt;td&gt; ⌃ + ⌥ + ⌘ + D &lt;/td&gt;
		&lt;td&gt;\n&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Change size of project drawer&lt;/td&gt;
		&lt;td&gt; Use mouse to adjust size &lt;/td&gt;
		&lt;td&gt; [add this to your .vimrc] let NERDTreeWinSize=16 &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Create new in Project Drawer &lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + N &lt;/td&gt;
		&lt;td&gt; Select Project Drawer. Highlight parent folder you&amp;#8217;d like file to appear in. Type m the choose a from select menu and type desired filename &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Delete a file&lt;/td&gt;
		&lt;td&gt; Click on file and select &amp;#8220;remove file&amp;#8221; &lt;/td&gt;
		&lt;td&gt; Highlight undesired file file in Project Drawer. Type m then choose d from drop down menu.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Opening a sub-folder&lt;/td&gt;
		&lt;td&gt; &lt;/td&gt;
		&lt;td&gt;Enter to open/close a directory&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Refresh project tree to reflect newly added files&lt;/td&gt;
		&lt;td&gt;Automatic&lt;/td&gt;
		&lt;td&gt;Nearly always automatic. Otherwise press r&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Clipboard&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Copy&lt;/td&gt;
		&lt;td&gt; ⌘ + C&lt;/td&gt;
		&lt;td&gt; yy&lt;br /&gt;
&lt;em&gt;Copies the current selection, or, if there is no selection, the current line&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Cut&lt;/td&gt;
		&lt;td&gt; ⌘ + X &lt;/td&gt;
		&lt;td&gt; d&lt;br /&gt;
&lt;em&gt;Technically this deletes the selection, but deleting in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; saves the deleted text to a register where it can be now be pasted with p&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Paste&lt;/td&gt;
		&lt;td&gt; ⌘ + V &lt;/td&gt;
		&lt;td&gt; p&lt;br /&gt;
&lt;em&gt;Pastes below the current line&lt;/em&gt; &lt;br /&gt;
P&lt;br /&gt;
&lt;em&gt;pastes above the current line&lt;/em&gt;&lt;br /&gt;
&amp;#8220;0p&lt;br /&gt;
&lt;em&gt;this pastes the last &lt;strong&gt;explicitly copied&lt;/strong&gt; text. this is important since many commands, such as deleting text, override the paste buffer&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Paste from system clipboard&lt;/td&gt;
		&lt;td&gt; As above. &lt;/td&gt;
		&lt;td&gt; &amp;quot;*p&lt;br /&gt;
&lt;em&gt;&lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; distinguishes between its internal clipboards (buffers) and the system&amp;#8217;s clipboard.&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Clipboard history&lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + V &lt;/td&gt;
		&lt;td&gt; :reg &lt;br /&gt;
&lt;em&gt;Show a list of registers each of which can be pasted e.g. &amp;quot;8p pastes the contents of the register 8&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&quot;switch_tabs&quot;&gt;Tabs&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;New tab&lt;/td&gt;
		&lt;td&gt; Click on file in project drawer &lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + T &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Drop tab&lt;/td&gt;
		&lt;td&gt; ⌃ + w &lt;/td&gt;
		&lt;td&gt; ⌃ + w &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Switch tabs left &lt;/td&gt;
		&lt;td&gt; ⇧ + ⌘ + ←&lt;/td&gt;
		&lt;td&gt; gT &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Switch tabs right &lt;/td&gt;
		&lt;td&gt; ⇧ + ⌘ + →&lt;/td&gt;
		&lt;td&gt; gt &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to tab&lt;/td&gt;
		&lt;td&gt; ⌘[1-9] &lt;/td&gt;
		&lt;td&gt; ⌘[1-9]&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Moving Around A File&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to beginning of line&lt;/td&gt;
		&lt;td&gt; ⌃ + A &lt;/td&gt;
		&lt;td&gt; ^ &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to end of line &lt;/td&gt;
		&lt;td&gt; ⌃ + E &lt;/td&gt;
		&lt;td&gt; $ &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to top of file &lt;/td&gt;
		&lt;td&gt; ⌘ + ↑ &lt;/td&gt;
		&lt;td&gt; gg &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to bottom of file &lt;/td&gt;
		&lt;td&gt; ⌘ + ↓ &lt;/td&gt;
		&lt;td&gt; G &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Move up one line (with caret at same position)&lt;/td&gt;
		&lt;td&gt; ⌃ + P &lt;/td&gt;
		&lt;td&gt; k &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Move down one line (with caret at same position)&lt;/td&gt;
		&lt;td&gt; ⌃ + N&lt;/td&gt;
		&lt;td&gt; j&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to line 20 &lt;/td&gt;
		&lt;td&gt; ⌘ + L [type a line &amp;#8211; e.g. 20] &lt;/td&gt;
		&lt;td&gt; :20 &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Jump between words left&lt;/td&gt;
		&lt;td&gt; ⌥ + ← w &lt;/td&gt;
		&lt;td&gt; b or B &lt;br /&gt;
&lt;em&gt;Lowercase b goes back one word, where puntuation marks count as word separators. B is back one word where only spaces count as word separators.&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Jump between words right&lt;/td&gt;
		&lt;td&gt; ⌥ + →&lt;/td&gt;
		&lt;td&gt; w or W &lt;br /&gt;
&lt;em&gt;same distinction as above&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Selecting Text&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt; Begin selection &lt;/td&gt;
		&lt;td&gt; ⇧ [then use arrows to drag over desired text] &lt;/td&gt;
		&lt;td&gt; v[enters visual mode. use w to move forward one word. ) to move forward one sentence and % to move to next bracket close. also /apple to move forward to next occurrence of apple]&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Select all&lt;/td&gt;
		&lt;td&gt; ⌘ + A &lt;/td&gt;
		&lt;td&gt; ggVG &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Increase selection left one word&lt;/td&gt;
		&lt;td&gt; ⇧ + ⌥ + ← then alt + ← for each additional word&lt;/td&gt;
		&lt;td&gt; v(select)w then w for each additional word  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Select a vertical block&lt;/td&gt;
		&lt;td&gt; ⌥ + drag mouse &lt;/td&gt;
		&lt;td&gt; ⌃ + v &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Deleting Text&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Delete line&lt;/td&gt;
		&lt;td&gt;⌘ + ⇧ + k &lt;/td&gt;
		&lt;td&gt; dd &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Delete character&lt;/td&gt;
		&lt;td&gt; Backspace &lt;em&gt;Erases character to the left of the caret&lt;/em&gt; &lt;/td&gt;
		&lt;td&gt;x &lt;br /&gt;
&lt;em&gt;Erases character under caret&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Delete selected text&lt;/td&gt;
		&lt;td&gt; Backspace &lt;/td&gt;
		&lt;td&gt; d &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Moving Text Around&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Move selected text up&lt;/td&gt;
		&lt;td&gt;⌃ + ⌘ + ↑ (or ↓)&lt;/td&gt;
		&lt;td&gt; :m 22 &lt;br /&gt;
&lt;em&gt;moves current line to line 22. Easier if line numbers are on with :set number. Alternatively :m+ or :m+N or :m-N for moving 1 or N lines up or down&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Merge current line With Next Line&lt;/td&gt;
		&lt;td&gt;⌃ + ⇧ +J &lt;/td&gt;
		&lt;td&gt; J &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Sort lines&lt;/td&gt;
		&lt;td&gt; ⌥ + ⌘ + R &amp;gt; sort in dialogue box &lt;/td&gt;
		&lt;td&gt; &lt;em&gt;Where you have previously selected text&lt;/em&gt;&lt;br /&gt;
!:sort &lt;br /&gt;
&lt;em&gt;Where you have nothing selecting and want to act on whole file&lt;/em&gt;&lt;br /&gt;
:%!sort (% is a symbol representing the whole file) &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Searching Files&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Search file downwards for &lt;span class=&quot;caps&quot;&gt;TOM&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt;⌃ + S &lt;span class=&quot;caps&quot;&gt;TOM&lt;/span&gt;  &lt;/td&gt;
		&lt;td&gt; /Tom &lt;br /&gt;
&lt;em&gt;Then press they enter key and then you can press n or N repeatedly to continue searching up or down&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Search file upwards for &lt;span class=&quot;caps&quot;&gt;TOM&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; ⇧ + ⌃ + S &lt;span class=&quot;caps&quot;&gt;TOM&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; ?&lt;span class=&quot;caps&quot;&gt;TOM&lt;/span&gt; &lt;br /&gt;
&lt;em&gt;As above, n or N continue searching up or down&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Full screen &lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;https://github.com/enormego/EGOTextMateFullScreen&quot;&gt;(Lion Only)&lt;/a&gt; &lt;/td&gt;
		&lt;td&gt; ⌘ + Enter &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Search entire project &lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + F &lt;/td&gt;
		&lt;td&gt; ,a THING_SEARCHING_FOR (ack) &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Find a specific method&lt;/td&gt;
		&lt;td&gt;⌘ + ⇧ + t&lt;/td&gt;
		&lt;td&gt; /def foo &lt;br /&gt;
&lt;em&gt;then use * to cycle through instances of the method name under the caret. This will not necessarily by definition # does the same but in the oppose direction&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Replacing Text in Files and in Entire Project&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Replace all &amp;#8220;donut&amp;#8221; with &amp;#8220;eclair&amp;#8221; in file&lt;/td&gt;
		&lt;td&gt; ⌘ F &lt;br /&gt;
&lt;em&gt;Find and replace box where you select &amp;#8216;Replace All&amp;#8217;.&lt;/em&gt; &lt;/td&gt;
		&lt;td&gt; :%s/donut/eclair/g &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Replace all &amp;#8220;donut&amp;#8221; with &amp;#8220;eclair&amp;#8221; in file, ignoring case &lt;/td&gt;
		&lt;td&gt; ⌘ F&lt;br /&gt;
 &lt;em&gt;Find and replace dialogue where you then select &amp;#8216;Ignore Case&amp;#8217;and then &amp;#8216;Replace All&amp;#8217;.&lt;/em&gt; &lt;/td&gt;
		&lt;td&gt; :%s/donut/eclair/gi &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Replace all &amp;#8220;donut&amp;#8221; with &amp;#8220;eclair&amp;#8221; in file, confirming each time &lt;/td&gt;
		&lt;td&gt; ⌘ F &lt;br /&gt;
&lt;em&gt;Find and replace box where you select &amp;#8216;Replace Next&amp;#8217;.&lt;/em&gt; &lt;/td&gt;
		&lt;td&gt; :%s/donut/eclair/gc &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Replace &amp;#8220;donut&amp;#8221; with &amp;#8220;eclair&amp;#8221; in entire project&lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + F &lt;/td&gt;
		&lt;td&gt; :Ack donut[Enter]. A window pops up with all instances of the term. &lt;Tab&gt; into the ack search window. Type :bufdo %s/donut/eclair/gce. :q the ack search window once down to close it.&lt;br /&gt;
&lt;em&gt;Save current file first if &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; throws an error&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Replace &amp;#8220;donut&amp;#8221; with &amp;#8220;eclair&amp;#8221; in entire project&lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + F &lt;/td&gt;
		&lt;td&gt; ,a donut[Enter] &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Ruby On Rails&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Nearly all of this functionality is thanks to Tpope&amp;#8217;s &lt;a href=&quot;https://github.com/tpope/vim-rails&quot;&gt;Rails.vim plugin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Call Ruby On Rails generate script &lt;/td&gt;
		&lt;td&gt; &amp;quot;⌃ + Pipe [1..8]== &lt;/td&gt;
		&lt;td&gt;:Rgenerate [controller model scaffold] Blog &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go To Last Migration&lt;/td&gt;
		&lt;td&gt; None &lt;/td&gt;
		&lt;td&gt; :Rmig  &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Run migrations&lt;/td&gt;
		&lt;td&gt; ⌃ + ⇧ + Pipe &lt;/td&gt;
		&lt;td&gt;[when in a migration] :Rake &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Switch focus to project drawer&lt;/td&gt;
		&lt;td&gt; ⌘ + ⌥ + ` (check)&lt;/td&gt;
		&lt;td&gt; ⌃ + w ⌃ + w &lt;br /&gt;
&lt;em&gt;A good key remapping is to map this onto tab by adding this to your vimrc: noremap &lt;tab&gt; &lt;C-w&gt;&lt;C-w&gt;&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Insert erb&amp;#8217;s &amp;lt;%= &lt;/td&gt;
		&lt;td&gt; ⌃ + ⇧ + . &lt;/td&gt;
		&lt;td&gt; Type text you want to surround first and place caret some inside. yss= &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Insert erb&amp;#8217;s &amp;lt;% &lt;/td&gt;
		&lt;td&gt; ⌃ + ⇧ + . &lt;/td&gt;
		&lt;td&gt; yss- &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Run unit test caret inside of &lt;/td&gt;
		&lt;td&gt; ⇧ + ⌘ + R &lt;/td&gt;
		&lt;td&gt; :.Rake &lt;br /&gt;
&lt;em&gt;. here represents the current line. You can substitute this for other lines e.g. :40Rake&lt;/em&gt; &lt;span class=&quot;caps&quot;&gt;TEST&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to test file (e.g. from user.rb to user_spec.rb)&lt;/td&gt;
		&lt;td&gt; ⌥ + ⇧  + ⌘ + ↓ &lt;/td&gt;
		&lt;td&gt; :A (:AV in a new split, :AT new tab)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Find related file&lt;/td&gt;
		&lt;td&gt; ⌥ + ⌘ + ↓ &lt;/td&gt;
		&lt;td&gt; :R&lt;br /&gt;
&lt;em&gt;If typed within the Controller you&amp;#8217;ll be brought to the View corresponding to the method selected; If typed in view &amp;#8594; Controller; Migrations &amp;#8594; Next Migration; Typed in Model &amp;#8594; Schema. For something more precise see the following &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; only commands&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to related controller&lt;/td&gt;
		&lt;td&gt; ⌥ + ⇧ + ⌘ + ↓ &lt;/td&gt;
		&lt;td&gt; :Rco &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to related helper&lt;/td&gt;
		&lt;td&gt; As above &lt;/td&gt;
		&lt;td&gt; :Rhe &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to model under cursor&lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; gf [e.g. you see Pos*t.first &amp;#8594; brought to #post.rb &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to stylesheet under cursor&lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; gf [e.g. you see&amp;lt;%= stylesheet_link_tag &amp;#8216;scaf*fold&amp;#8217; %&amp;gt;&amp;#8594; brought to scaffold.css &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;View Rails logs&lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; :Rlogs &lt;br /&gt;
&lt;em&gt;:Rake logs:clear if takes too long to load&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to layout under cursor&lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; gf &lt;br /&gt;
&lt;em&gt;e.g. you see layout :print &amp;#8594; brought to #print.html.erb&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to application.rb&lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; :Renv&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to test.rb &lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; :Renv t[tab to autofill out to test]&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Go to controller from link under cursor&lt;/td&gt;
		&lt;td&gt; No equivalent&lt;/td&gt;
		&lt;td&gt; gf [e.g. you see &amp;lt;%= link_to &amp;#8220;New&amp;#8221;, new_comme*nt_path %&amp;gt; &amp;#8594; brought to #comments_controller.rb &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Create a posts controller &lt;/td&gt;
		&lt;td&gt; No equivalent &lt;/td&gt;
		&lt;td&gt;:Rco posts! &lt;br /&gt;
&lt;em&gt;Note the exclamation mark which distinguishes this create command from the find command.&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Extract to partial&lt;/td&gt;
		&lt;td&gt; [Select text] ⌃ + H &lt;/td&gt;
		&lt;td&gt; [Select text] :Rextract PARTIAL_NAME &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Indentation&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Automatically indent code beautifully on whole file &lt;/td&gt;
		&lt;td&gt; ⌥ + ⌘ + B (&lt;a href=&quot;https://github.com/mocoso/code-beautifier.tmbundle&quot;&gt;Code Beautifier Plugin&lt;/a&gt;) &lt;/td&gt;
		&lt;td&gt; gg=G &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Fix indentation on selected area &lt;/td&gt;
		&lt;td&gt; No equivalent &lt;/td&gt;
		&lt;td&gt; = &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Fix indentation on a single line &lt;/td&gt;
		&lt;td&gt; No equivalent &lt;/td&gt;
		&lt;td&gt; == &lt;br /&gt;
&lt;em&gt;Compare with the above to note a pattern. Type a command once to apply it to visually selected areas. Type it twice to apply to the current line, which need not be selected. See also d and dd, y and yy&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Indent&lt;/td&gt;
		&lt;td&gt;⌘ + [ &lt;/td&gt;
		&lt;td&gt; &amp;gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Unindent&lt;/td&gt;
		&lt;td&gt; ⌘ + ] &lt;/td&gt;
		&lt;td&gt; &amp;lt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Font Size, Line Numberings&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Bigger/Smaller Font&lt;/td&gt;
		&lt;td&gt; ⌘ +/- &lt;/td&gt;
		&lt;td&gt;  [~/gvimrc.local] set guifont=Monaco:h18 &lt;br /&gt;
&lt;em&gt;You can replace 18 here with your desired font-size&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;[Note that you can try this command out by typing it into a live &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; session just by preceding it with a :, e.g. :set&amp;#8230;..&lt;/em&gt;&lt;br /&gt;
_Using ⌘ +/- in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; makes the screen scale disproportionately &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Line numbering&lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + L&lt;/td&gt;
		&lt;td&gt; :set number &lt;br /&gt;
&lt;em&gt;Turn on&lt;/em&gt;&lt;br /&gt;
:set nonumber &lt;br /&gt;
&lt;em&gt;Turn off&lt;/em&gt;. &lt;br /&gt;
&lt;em&gt;Note the symmetry between turning the number on and off, the only different being the preceded &amp;#8220;no&amp;#8221;. This is the same for all &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; set commands. As with other preferences this may be placed in vimrc.local&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Spell Checking&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Highlight incorrect spellings&lt;/td&gt;
		&lt;td&gt; ⌥ + ⌘ + ; &lt;/td&gt;
		&lt;td&gt; :set spell &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Next incorrect spelling &lt;/td&gt;
		&lt;td&gt; ⌘ + : &lt;/td&gt;
		&lt;td&gt; [Assuming you&amp;#8217;ve enabled spell checking and can see highlighter errors] ] s &lt;br /&gt;
&lt;em&gt;Go to previous spelling error with [s&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Suggest correct spelling&lt;/td&gt;
		&lt;td&gt; Double click and select best spelling &lt;/td&gt;
		&lt;td&gt; z= &lt;br /&gt;
&lt;em&gt;Then choose the correct spelling from drop down menu&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Bookmarks&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Add bookmark&lt;/td&gt;
		&lt;td&gt; ⌘ + F2 (Never worked on my mac) &lt;/td&gt;
		&lt;td&gt; m[a-z] &lt;br /&gt;
&lt;em&gt;The letter in the range refers to this bookmark&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Jump to bookmark&lt;/td&gt;
		&lt;td&gt; F2 (next) + F2 (previous) &lt;/td&gt;
		&lt;td&gt; &amp;#8217;a &lt;br /&gt;
&lt;em&gt;Where a is a bookmark previously set. Type :marks to see all bookmarks&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Uppercase/Lowercase&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Upcase selected text&lt;/td&gt;
		&lt;td&gt;⌃ + ⇧ + U&lt;/td&gt;
		&lt;td&gt; u &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Downcase selected text&lt;/td&gt;
		&lt;td&gt;⌃ + ⇧ + U&lt;/td&gt;
		&lt;td&gt; U &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Switchcase of selected text &lt;/td&gt;
		&lt;td&gt; ⌃ + g &lt;/td&gt;
		&lt;td&gt; ~ &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Titlecase current text&lt;/td&gt;
		&lt;td&gt; ⌃ + ⌥ + U &lt;/td&gt;
		&lt;td&gt; No exact equivalent &lt;br /&gt;
&lt;em&gt;To titlecase the current line you can use :s :s/\&amp;lt;\(\w\)\(\w*\)\&amp;gt;/\u\1\L\2/g&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Auto-complete&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;All of the following commands assume you are in insert mode&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Auto-complete method&lt;/td&gt;
		&lt;td&gt; ⎋ after typing first few letters&lt;/td&gt;
		&lt;td&gt; Tab after typing first few letters&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Auto-complete filename&lt;/td&gt;
		&lt;td&gt; No equivalent &lt;/td&gt;
		&lt;td&gt; ⌃ + X ⌃ + F &lt;br /&gt;
&lt;em&gt;Only fills one directory at a time so you&amp;#8217;ll need to repeat for each additional one&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Auto-complete full line of code &lt;/td&gt;
		&lt;td&gt; No equivalent &lt;/td&gt;
		&lt;td&gt; ⌃ + X + l &lt;/td&gt;
&lt;/table&gt;
&lt;h2&gt;Commenting Code&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Comment Line or Selection&lt;/td&gt;
		&lt;td&gt; ⌘ + / &lt;/td&gt;
		&lt;td&gt; ⌘ + / &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Syntax Errors&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Check for syntax errors on saving (*life saver)&lt;/td&gt;
		&lt;td&gt; &lt;a href=&quot;https://github.com/sxtxixtxcxh/validate-on-save.tmbundle&quot;&gt;Validate On Save Plugin&lt;/a&gt; &lt;/td&gt;
		&lt;td&gt; Built In &lt;br /&gt;
&lt;em&gt;A grey bar appears right of the number column with an &amp;gt; beside the error&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Auto-closing Quotes, Html Tags, Brackets.&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;All of the following commands assume you are in insert mode&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Add opposing bracket or quotation mark&lt;/td&gt;
		&lt;td&gt; Typing a &amp;quot; will automatically add in closing. &lt;/td&gt;
		&lt;td&gt; Add &lt;a href=&quot;https://gist.github.com/1193298&quot;&gt;this gist&lt;/a&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Close current html tag&lt;/td&gt;
		&lt;td&gt;⌘ + ⌥ + .&lt;/td&gt;
		&lt;td&gt; ⌃ + x + / &lt;em&gt;Also you have auto tag creation. To create &lt;p&gt;&lt;/p&gt; type p then  ⌃ + X Spacebar&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;Assumes you have the following in your ~/.janus.rake file:&lt;br /&gt;
vim_plugin&lt;/em&gt;task &amp;#8220;ragtag&amp;#8221;, &amp;#8220;git://github.com/tpope/vim-ragtag.git&amp;#8221;&lt;br /&gt;
_ &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; Colours&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;View &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; colour wheel&lt;/td&gt;
		&lt;td&gt; ⌘ + ⇧ + C &lt;/td&gt;
		&lt;td&gt; No exact equivalent.  vim_plugin_task &amp;#8220;vim-css-color&amp;#8221;, &amp;#8216;git://github.com/skammer/vim-css-color.git&amp;#8217; turns #acbdef into its correct colour&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Running Tests and Files&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Run tests for given file&lt;/td&gt;
		&lt;td&gt;⌘ + r &lt;/td&gt;
		&lt;td&gt; :Rake &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Run current file&lt;/td&gt;
		&lt;td&gt; ⌘ + R &lt;/td&gt;
		&lt;td&gt; :!ruby % &lt;br /&gt;
&lt;em&gt;Explanation: :! means execute what follows as if in shell. % expands to the current_file_name so you are executing `ruby current_file_name. This runs in a buffer in &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; making you unable to continue editing.&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Snippets&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Snippets (e.g. validates present of)&lt;/td&gt;
		&lt;td&gt; vp + &lt;span class=&quot;caps&quot;&gt;TAB&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; vp ⌃ + ] &lt;br /&gt;
&lt;em&gt;Abbreviations same as in Textmate&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;Non Rails snippets not working since the latest releases of snippets plugin clashes with Command-T search plugin. I&amp;#8217;ve filed bug reports and if anyone has fixed this let me know.&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;See All Available Snippers&lt;/td&gt;
		&lt;td&gt; Use Menu &lt;/td&gt;
		&lt;td&gt;:Rabbrev&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Syntax Highlighting&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Set syntax highlighting to (e.g.) textile&lt;/td&gt;
		&lt;td&gt; Varies depending on highlighter. Select manually at the bottom of the screen. &lt;/td&gt;
		&lt;td&gt; :set syntax=textile &lt;br /&gt;
&lt;em&gt;You probably won&amp;#8217;t need this since &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; will automatically figure out the appropriate syntax highlighter.&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Turn on syntax highlighting&lt;/td&gt;
		&lt;td&gt; No option to enable/disable &lt;/td&gt;
		&lt;td&gt; :syntax on&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Turn off syntax highlighting&lt;/td&gt;
		&lt;td&gt; No option &lt;/td&gt;
		&lt;td&gt; :syntax off&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Formatting&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Reformat selection to according to wrap settings &lt;/td&gt;
		&lt;td&gt;⌃Q &lt;/td&gt;
		&lt;td&gt;gq &lt;em&gt;gqgq, i.e. the command twice, to reformat the current line&lt;/em&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Other&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Duplicate line/selection&lt;/td&gt;
		&lt;td&gt; ⌃ + ⇧ + D&lt;/td&gt;
		&lt;td&gt; yyp &lt;br /&gt;
&lt;em&gt;y copies line then p pastes in below.&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Add placeholder text&lt;/td&gt;
		&lt;td&gt;lorem + tab&lt;/td&gt;
		&lt;td&gt; lorem + enter&lt;br /&gt;
&lt;em&gt;Assumes you have add the following to your vimrc.local:&lt;br /&gt;
&amp;quot; anytime &amp;#8216;lorem&amp;#8217; is typed in, replace it with placeholder text&lt;br /&gt;
abbr lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras a ornare metus. In justo metus, auctor nec semper in, laoreet porttitor augue. Maecenas tortor libero, dignissim vel placerat sit amet, malesuada ut quam. Curabitur vitae velit lacus, sed imperdiet sapien. Sed posuere, odio nec pharetra adipiscing&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Overwrite Mode&lt;/td&gt;
		&lt;td&gt; ⇧ + ⌥ + O &lt;br /&gt;
&lt;em&gt;Then start typing text&lt;/em&gt; &lt;/td&gt;
		&lt;td&gt; R &lt;br /&gt;
&lt;em&gt;Then start typing text&lt;/em&gt; &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Edit ends of selected lines&lt;/td&gt;
		&lt;td&gt;⌘ + ⌥ + a&lt;/td&gt;
		&lt;td&gt; &lt;br /&gt;
⌃ + V to enter &lt;span class=&quot;caps&quot;&gt;VISUAL&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;BLOCK&lt;/span&gt; mode&lt;br /&gt;
select your lines&lt;br /&gt;
$ to go to the end of the selection&lt;br /&gt;
A to enter &lt;span class=&quot;caps&quot;&gt;EDIT&lt;/span&gt; mode at the end&lt;br /&gt;
⎋ when you are finished_ &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; Edit start of selected lines&lt;/td&gt;
		&lt;td&gt; No equivalent &lt;/td&gt;
		&lt;td&gt; Sane as above, except you press I instead of A&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;Wrap selected text in P tags&lt;/td&gt;
		&lt;td&gt; ⇧ + ⌃ + W &lt;/td&gt;
		&lt;td&gt; ystp &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Help&lt;/h2&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Search help for &amp;#8216;grep&amp;#8217;&lt;/td&gt;
		&lt;td&gt;Click help menu and search for help&lt;/td&gt;
		&lt;td&gt;:help grep&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Email Me If I Left Something Out&lt;/h2&gt;
&lt;p&gt;Or if you can find a more idiomatic way of doing any of the above commands.&lt;/p&gt;
&lt;h2 id=&quot;vim_training_resources&quot;&gt;Recommended Resources For Learning Basic &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Remember the key is to train your fingers. Don&amp;#8217;t just read the text; open up a blank file and try out different commands. If you want to get good at &lt;span class=&quot;caps&quot;&gt;VIM&lt;/span&gt; you need to have the confidence to tear a file to pieces your training sessions.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.derekwyatt.org/vim/vim-tutorial-videos/&quot; title=&quot;Highly recommended, if you can tolerate his excitement&quot;&gt;Derek Wyatt&amp;#8217;s Video Series&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://alfmikula.blogspot.com/2010/11/using-spaced-repetition-software-to.html&quot; title=&quot;My Personal Favourite&quot;&gt;Spaced Repetition Systems For Drilling&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://stevelosh.com/blog/2010/09/coming-home-to-vim/&quot;&gt;Coming Home To Vim&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html&quot;&gt;Visual Cheat Sheets&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://vimregex.com/&quot;&gt;Regular expressions in Vim&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://peepcode.com/products/smash-into-vim-i&quot; title=&quot;Commercial&quot;&gt;PeepCode&amp;#8217;s Video Series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
</feed>
